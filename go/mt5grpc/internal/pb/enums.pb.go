// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.31.1
// source: enums.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeFrame int32

const (
	TimeFrame_TIMEFRAME_UNSPECIFIED TimeFrame = 0
	TimeFrame_TIMEFRAME_M1          TimeFrame = 1
	TimeFrame_TIMEFRAME_M2          TimeFrame = 2
	TimeFrame_TIMEFRAME_M3          TimeFrame = 3
	TimeFrame_TIMEFRAME_M4          TimeFrame = 4
	TimeFrame_TIMEFRAME_M5          TimeFrame = 5
	TimeFrame_TIMEFRAME_M6          TimeFrame = 6
	TimeFrame_TIMEFRAME_M10         TimeFrame = 10
	TimeFrame_TIMEFRAME_M12         TimeFrame = 12
	TimeFrame_TIMEFRAME_M15         TimeFrame = 15
	TimeFrame_TIMEFRAME_M20         TimeFrame = 20
	TimeFrame_TIMEFRAME_M30         TimeFrame = 30
	TimeFrame_TIMEFRAME_H1          TimeFrame = 16385
	TimeFrame_TIMEFRAME_H2          TimeFrame = 16386
	TimeFrame_TIMEFRAME_H3          TimeFrame = 16387
	TimeFrame_TIMEFRAME_H4          TimeFrame = 16388
	TimeFrame_TIMEFRAME_H6          TimeFrame = 16390
	TimeFrame_TIMEFRAME_H8          TimeFrame = 16392
	TimeFrame_TIMEFRAME_H12         TimeFrame = 16396
	TimeFrame_TIMEFRAME_D1          TimeFrame = 16408
	TimeFrame_TIMEFRAME_W1          TimeFrame = 32769
	TimeFrame_TIMEFRAME_MN1         TimeFrame = 49153
)

// Enum value maps for TimeFrame.
var (
	TimeFrame_name = map[int32]string{
		0:     "TIMEFRAME_UNSPECIFIED",
		1:     "TIMEFRAME_M1",
		2:     "TIMEFRAME_M2",
		3:     "TIMEFRAME_M3",
		4:     "TIMEFRAME_M4",
		5:     "TIMEFRAME_M5",
		6:     "TIMEFRAME_M6",
		10:    "TIMEFRAME_M10",
		12:    "TIMEFRAME_M12",
		15:    "TIMEFRAME_M15",
		20:    "TIMEFRAME_M20",
		30:    "TIMEFRAME_M30",
		16385: "TIMEFRAME_H1",
		16386: "TIMEFRAME_H2",
		16387: "TIMEFRAME_H3",
		16388: "TIMEFRAME_H4",
		16390: "TIMEFRAME_H6",
		16392: "TIMEFRAME_H8",
		16396: "TIMEFRAME_H12",
		16408: "TIMEFRAME_D1",
		32769: "TIMEFRAME_W1",
		49153: "TIMEFRAME_MN1",
	}
	TimeFrame_value = map[string]int32{
		"TIMEFRAME_UNSPECIFIED": 0,
		"TIMEFRAME_M1":          1,
		"TIMEFRAME_M2":          2,
		"TIMEFRAME_M3":          3,
		"TIMEFRAME_M4":          4,
		"TIMEFRAME_M5":          5,
		"TIMEFRAME_M6":          6,
		"TIMEFRAME_M10":         10,
		"TIMEFRAME_M12":         12,
		"TIMEFRAME_M15":         15,
		"TIMEFRAME_M20":         20,
		"TIMEFRAME_M30":         30,
		"TIMEFRAME_H1":          16385,
		"TIMEFRAME_H2":          16386,
		"TIMEFRAME_H3":          16387,
		"TIMEFRAME_H4":          16388,
		"TIMEFRAME_H6":          16390,
		"TIMEFRAME_H8":          16392,
		"TIMEFRAME_H12":         16396,
		"TIMEFRAME_D1":          16408,
		"TIMEFRAME_W1":          32769,
		"TIMEFRAME_MN1":         49153,
	}
)

func (x TimeFrame) Enum() *TimeFrame {
	p := new(TimeFrame)
	*p = x
	return p
}

func (x TimeFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (TimeFrame) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x TimeFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeFrame.Descriptor instead.
func (TimeFrame) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

type OrderTime int32

const (
	OrderTime_ORDER_TIME_GTC           OrderTime = 0 // Good till cancel order
	OrderTime_ORDER_TIME_DAY           OrderTime = 1 // Good till current trade day order
	OrderTime_ORDER_TIME_SPECIFIED     OrderTime = 2 // Good till expired order
	OrderTime_ORDER_TIME_SPECIFIED_DAY OrderTime = 3 // The order will be effective till 23:59:59 of the specified day. If this time is outside a trading session, the order expires in the nearest trading time.
)

// Enum value maps for OrderTime.
var (
	OrderTime_name = map[int32]string{
		0: "ORDER_TIME_GTC",
		1: "ORDER_TIME_DAY",
		2: "ORDER_TIME_SPECIFIED",
		3: "ORDER_TIME_SPECIFIED_DAY",
	}
	OrderTime_value = map[string]int32{
		"ORDER_TIME_GTC":           0,
		"ORDER_TIME_DAY":           1,
		"ORDER_TIME_SPECIFIED":     2,
		"ORDER_TIME_SPECIFIED_DAY": 3,
	}
)

func (x OrderTime) Enum() *OrderTime {
	p := new(OrderTime)
	*p = x
	return p
}

func (x OrderTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTime) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (OrderTime) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x OrderTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTime.Descriptor instead.
func (OrderTime) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

type OrderTypeFilling int32

const (
	// ENUM_ORDER_TYPE_FILLING
	OrderTypeFilling_ORDER_FILLING_FOK    OrderTypeFilling = 0 // Fill Or Kill order
	OrderTypeFilling_ORDER_FILLING_IOC    OrderTypeFilling = 1 // Immediately Or Cancel
	OrderTypeFilling_ORDER_FILLING_RETURN OrderTypeFilling = 2 // Return remaining volume to book
	OrderTypeFilling_ORDER_FILLING_BOC    OrderTypeFilling = 3 // Book Or Cancel order
)

// Enum value maps for OrderTypeFilling.
var (
	OrderTypeFilling_name = map[int32]string{
		0: "ORDER_FILLING_FOK",
		1: "ORDER_FILLING_IOC",
		2: "ORDER_FILLING_RETURN",
		3: "ORDER_FILLING_BOC",
	}
	OrderTypeFilling_value = map[string]int32{
		"ORDER_FILLING_FOK":    0,
		"ORDER_FILLING_IOC":    1,
		"ORDER_FILLING_RETURN": 2,
		"ORDER_FILLING_BOC":    3,
	}
)

func (x OrderTypeFilling) Enum() *OrderTypeFilling {
	p := new(OrderTypeFilling)
	*p = x
	return p
}

func (x OrderTypeFilling) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTypeFilling) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (OrderTypeFilling) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x OrderTypeFilling) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTypeFilling.Descriptor instead.
func (OrderTypeFilling) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

type TradeAction int32

const (
	// ENUM_TRADE_REQUEST_ACTIONS, Trade Operation Types
	TradeAction_TRADE_ACTION_UNSPECIFIED TradeAction = 0
	TradeAction_TRADE_ACTION_DEAL        TradeAction = 1  // Place a trade order for an immediate execution with the specified parameters (market order)
	TradeAction_TRADE_ACTION_PENDING     TradeAction = 5  // Place a trade order for the execution under specified conditions (pending order)
	TradeAction_TRADE_ACTION_SLTP        TradeAction = 6  // Modify Stop Loss and Take Profit values of an opened position
	TradeAction_TRADE_ACTION_MODIFY      TradeAction = 7  // Modify the parameters of the order placed previously
	TradeAction_TRADE_ACTION_REMOVE      TradeAction = 8  // Delete the pending order placed previously
	TradeAction_TRADE_ACTION_CLOSE_BY    TradeAction = 10 // Close a position by an opposite one
)

// Enum value maps for TradeAction.
var (
	TradeAction_name = map[int32]string{
		0:  "TRADE_ACTION_UNSPECIFIED",
		1:  "TRADE_ACTION_DEAL",
		5:  "TRADE_ACTION_PENDING",
		6:  "TRADE_ACTION_SLTP",
		7:  "TRADE_ACTION_MODIFY",
		8:  "TRADE_ACTION_REMOVE",
		10: "TRADE_ACTION_CLOSE_BY",
	}
	TradeAction_value = map[string]int32{
		"TRADE_ACTION_UNSPECIFIED": 0,
		"TRADE_ACTION_DEAL":        1,
		"TRADE_ACTION_PENDING":     5,
		"TRADE_ACTION_SLTP":        6,
		"TRADE_ACTION_MODIFY":      7,
		"TRADE_ACTION_REMOVE":      8,
		"TRADE_ACTION_CLOSE_BY":    10,
	}
)

func (x TradeAction) Enum() *TradeAction {
	p := new(TradeAction)
	*p = x
	return p
}

func (x TradeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (TradeAction) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x TradeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeAction.Descriptor instead.
func (TradeAction) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

type OrderType int32

const (
	// order types, ENUM_ORDER_TYPE
	OrderType_ORDER_TYPE_BUY             OrderType = 0 // Market Buy order
	OrderType_ORDER_TYPE_SELL            OrderType = 1 // Market Sell order
	OrderType_ORDER_TYPE_BUY_LIMIT       OrderType = 2 // Buy Limit pending order
	OrderType_ORDER_TYPE_SELL_LIMIT      OrderType = 3 // Sell Limit pending order
	OrderType_ORDER_TYPE_BUY_STOP        OrderType = 4 // Buy Stop pending order
	OrderType_ORDER_TYPE_SELL_STOP       OrderType = 5 // Sell Stop pending order
	OrderType_ORDER_TYPE_BUY_STOP_LIMIT  OrderType = 6 // Upon reaching the order price, a pending Buy Limit order is placed at the StopLimit price
	OrderType_ORDER_TYPE_SELL_STOP_LIMIT OrderType = 7 // Upon reaching the order price, a pending Sell Limit order is placed at the StopLimit price
	OrderType_ORDER_TYPE_CLOSE_BY        OrderType = 8 // Order to close a position by an opposite one
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_BUY",
		1: "ORDER_TYPE_SELL",
		2: "ORDER_TYPE_BUY_LIMIT",
		3: "ORDER_TYPE_SELL_LIMIT",
		4: "ORDER_TYPE_BUY_STOP",
		5: "ORDER_TYPE_SELL_STOP",
		6: "ORDER_TYPE_BUY_STOP_LIMIT",
		7: "ORDER_TYPE_SELL_STOP_LIMIT",
		8: "ORDER_TYPE_CLOSE_BY",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_BUY":             0,
		"ORDER_TYPE_SELL":            1,
		"ORDER_TYPE_BUY_LIMIT":       2,
		"ORDER_TYPE_SELL_LIMIT":      3,
		"ORDER_TYPE_BUY_STOP":        4,
		"ORDER_TYPE_SELL_STOP":       5,
		"ORDER_TYPE_BUY_STOP_LIMIT":  6,
		"ORDER_TYPE_SELL_STOP_LIMIT": 7,
		"ORDER_TYPE_CLOSE_BY":        8,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

type BookType int32

const (
	// ENUM_BOOK_TYPE
	BookType_BOOK_TYPE_UNSPECIFIED BookType = 0
	BookType_BOOK_TYPE_SELL        BookType = 1
	BookType_BOOK_TYPE_BUY         BookType = 2
	BookType_BOOK_TYPE_SELL_MARKET BookType = 3
	BookType_BOOK_TYPE_BUY_MARKET  BookType = 4
)

// Enum value maps for BookType.
var (
	BookType_name = map[int32]string{
		0: "BOOK_TYPE_UNSPECIFIED",
		1: "BOOK_TYPE_SELL",
		2: "BOOK_TYPE_BUY",
		3: "BOOK_TYPE_SELL_MARKET",
		4: "BOOK_TYPE_BUY_MARKET",
	}
	BookType_value = map[string]int32{
		"BOOK_TYPE_UNSPECIFIED": 0,
		"BOOK_TYPE_SELL":        1,
		"BOOK_TYPE_BUY":         2,
		"BOOK_TYPE_SELL_MARKET": 3,
		"BOOK_TYPE_BUY_MARKET":  4,
	}
)

func (x BookType) Enum() *BookType {
	p := new(BookType)
	*p = x
	return p
}

func (x BookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (BookType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x BookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookType.Descriptor instead.
func (BookType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

type TradeReturnCode int32

const (
	TradeReturnCode_TRADE_RETCODE_UNSPECIFIED          TradeReturnCode = 0 // optional: default fallback
	TradeReturnCode_TRADE_RETCODE_REQUOTE              TradeReturnCode = 10004
	TradeReturnCode_TRADE_RETCODE_REJECT               TradeReturnCode = 10006
	TradeReturnCode_TRADE_RETCODE_CANCEL               TradeReturnCode = 10007
	TradeReturnCode_TRADE_RETCODE_PLACED               TradeReturnCode = 10008
	TradeReturnCode_TRADE_RETCODE_DONE                 TradeReturnCode = 10009
	TradeReturnCode_TRADE_RETCODE_DONE_PARTIAL         TradeReturnCode = 10010
	TradeReturnCode_TRADE_RETCODE_ERROR                TradeReturnCode = 10011
	TradeReturnCode_TRADE_RETCODE_TIMEOUT              TradeReturnCode = 10012
	TradeReturnCode_TRADE_RETCODE_INVALID              TradeReturnCode = 10013
	TradeReturnCode_TRADE_RETCODE_INVALID_VOLUME       TradeReturnCode = 10014
	TradeReturnCode_TRADE_RETCODE_INVALID_PRICE        TradeReturnCode = 10015
	TradeReturnCode_TRADE_RETCODE_INVALID_STOPS        TradeReturnCode = 10016
	TradeReturnCode_TRADE_RETCODE_TRADE_DISABLED       TradeReturnCode = 10017
	TradeReturnCode_TRADE_RETCODE_MARKET_CLOSED        TradeReturnCode = 10018
	TradeReturnCode_TRADE_RETCODE_NO_MONEY             TradeReturnCode = 10019
	TradeReturnCode_TRADE_RETCODE_PRICE_CHANGED        TradeReturnCode = 10020
	TradeReturnCode_TRADE_RETCODE_PRICE_OFF            TradeReturnCode = 10021
	TradeReturnCode_TRADE_RETCODE_INVALID_EXPIRATION   TradeReturnCode = 10022
	TradeReturnCode_TRADE_RETCODE_ORDER_CHANGED        TradeReturnCode = 10023
	TradeReturnCode_TRADE_RETCODE_TOO_MANY_REQUESTS    TradeReturnCode = 10024
	TradeReturnCode_TRADE_RETCODE_NO_CHANGES           TradeReturnCode = 10025
	TradeReturnCode_TRADE_RETCODE_SERVER_DISABLES_AT   TradeReturnCode = 10026
	TradeReturnCode_TRADE_RETCODE_CLIENT_DISABLES_AT   TradeReturnCode = 10027
	TradeReturnCode_TRADE_RETCODE_LOCKED               TradeReturnCode = 10028
	TradeReturnCode_TRADE_RETCODE_FROZEN               TradeReturnCode = 10029
	TradeReturnCode_TRADE_RETCODE_INVALID_FILL         TradeReturnCode = 10030
	TradeReturnCode_TRADE_RETCODE_CONNECTION           TradeReturnCode = 10031
	TradeReturnCode_TRADE_RETCODE_ONLY_REAL            TradeReturnCode = 10032
	TradeReturnCode_TRADE_RETCODE_LIMIT_ORDERS         TradeReturnCode = 10033
	TradeReturnCode_TRADE_RETCODE_LIMIT_VOLUME         TradeReturnCode = 10034
	TradeReturnCode_TRADE_RETCODE_INVALID_ORDER        TradeReturnCode = 10035
	TradeReturnCode_TRADE_RETCODE_POSITION_CLOSED      TradeReturnCode = 10036
	TradeReturnCode_TRADE_RETCODE_INVALID_CLOSE_VOLUME TradeReturnCode = 10038
	TradeReturnCode_TRADE_RETCODE_CLOSE_ORDER_EXIST    TradeReturnCode = 10039
	TradeReturnCode_TRADE_RETCODE_LIMIT_POSITIONS      TradeReturnCode = 10040
	TradeReturnCode_TRADE_RETCODE_REJECT_CANCEL        TradeReturnCode = 10041
	TradeReturnCode_TRADE_RETCODE_LONG_ONLY            TradeReturnCode = 10042
	TradeReturnCode_TRADE_RETCODE_SHORT_ONLY           TradeReturnCode = 10043
	TradeReturnCode_TRADE_RETCODE_CLOSE_ONLY           TradeReturnCode = 10044
	TradeReturnCode_TRADE_RETCODE_FIFO_CLOSE           TradeReturnCode = 10045
)

// Enum value maps for TradeReturnCode.
var (
	TradeReturnCode_name = map[int32]string{
		0:     "TRADE_RETCODE_UNSPECIFIED",
		10004: "TRADE_RETCODE_REQUOTE",
		10006: "TRADE_RETCODE_REJECT",
		10007: "TRADE_RETCODE_CANCEL",
		10008: "TRADE_RETCODE_PLACED",
		10009: "TRADE_RETCODE_DONE",
		10010: "TRADE_RETCODE_DONE_PARTIAL",
		10011: "TRADE_RETCODE_ERROR",
		10012: "TRADE_RETCODE_TIMEOUT",
		10013: "TRADE_RETCODE_INVALID",
		10014: "TRADE_RETCODE_INVALID_VOLUME",
		10015: "TRADE_RETCODE_INVALID_PRICE",
		10016: "TRADE_RETCODE_INVALID_STOPS",
		10017: "TRADE_RETCODE_TRADE_DISABLED",
		10018: "TRADE_RETCODE_MARKET_CLOSED",
		10019: "TRADE_RETCODE_NO_MONEY",
		10020: "TRADE_RETCODE_PRICE_CHANGED",
		10021: "TRADE_RETCODE_PRICE_OFF",
		10022: "TRADE_RETCODE_INVALID_EXPIRATION",
		10023: "TRADE_RETCODE_ORDER_CHANGED",
		10024: "TRADE_RETCODE_TOO_MANY_REQUESTS",
		10025: "TRADE_RETCODE_NO_CHANGES",
		10026: "TRADE_RETCODE_SERVER_DISABLES_AT",
		10027: "TRADE_RETCODE_CLIENT_DISABLES_AT",
		10028: "TRADE_RETCODE_LOCKED",
		10029: "TRADE_RETCODE_FROZEN",
		10030: "TRADE_RETCODE_INVALID_FILL",
		10031: "TRADE_RETCODE_CONNECTION",
		10032: "TRADE_RETCODE_ONLY_REAL",
		10033: "TRADE_RETCODE_LIMIT_ORDERS",
		10034: "TRADE_RETCODE_LIMIT_VOLUME",
		10035: "TRADE_RETCODE_INVALID_ORDER",
		10036: "TRADE_RETCODE_POSITION_CLOSED",
		10038: "TRADE_RETCODE_INVALID_CLOSE_VOLUME",
		10039: "TRADE_RETCODE_CLOSE_ORDER_EXIST",
		10040: "TRADE_RETCODE_LIMIT_POSITIONS",
		10041: "TRADE_RETCODE_REJECT_CANCEL",
		10042: "TRADE_RETCODE_LONG_ONLY",
		10043: "TRADE_RETCODE_SHORT_ONLY",
		10044: "TRADE_RETCODE_CLOSE_ONLY",
		10045: "TRADE_RETCODE_FIFO_CLOSE",
	}
	TradeReturnCode_value = map[string]int32{
		"TRADE_RETCODE_UNSPECIFIED":          0,
		"TRADE_RETCODE_REQUOTE":              10004,
		"TRADE_RETCODE_REJECT":               10006,
		"TRADE_RETCODE_CANCEL":               10007,
		"TRADE_RETCODE_PLACED":               10008,
		"TRADE_RETCODE_DONE":                 10009,
		"TRADE_RETCODE_DONE_PARTIAL":         10010,
		"TRADE_RETCODE_ERROR":                10011,
		"TRADE_RETCODE_TIMEOUT":              10012,
		"TRADE_RETCODE_INVALID":              10013,
		"TRADE_RETCODE_INVALID_VOLUME":       10014,
		"TRADE_RETCODE_INVALID_PRICE":        10015,
		"TRADE_RETCODE_INVALID_STOPS":        10016,
		"TRADE_RETCODE_TRADE_DISABLED":       10017,
		"TRADE_RETCODE_MARKET_CLOSED":        10018,
		"TRADE_RETCODE_NO_MONEY":             10019,
		"TRADE_RETCODE_PRICE_CHANGED":        10020,
		"TRADE_RETCODE_PRICE_OFF":            10021,
		"TRADE_RETCODE_INVALID_EXPIRATION":   10022,
		"TRADE_RETCODE_ORDER_CHANGED":        10023,
		"TRADE_RETCODE_TOO_MANY_REQUESTS":    10024,
		"TRADE_RETCODE_NO_CHANGES":           10025,
		"TRADE_RETCODE_SERVER_DISABLES_AT":   10026,
		"TRADE_RETCODE_CLIENT_DISABLES_AT":   10027,
		"TRADE_RETCODE_LOCKED":               10028,
		"TRADE_RETCODE_FROZEN":               10029,
		"TRADE_RETCODE_INVALID_FILL":         10030,
		"TRADE_RETCODE_CONNECTION":           10031,
		"TRADE_RETCODE_ONLY_REAL":            10032,
		"TRADE_RETCODE_LIMIT_ORDERS":         10033,
		"TRADE_RETCODE_LIMIT_VOLUME":         10034,
		"TRADE_RETCODE_INVALID_ORDER":        10035,
		"TRADE_RETCODE_POSITION_CLOSED":      10036,
		"TRADE_RETCODE_INVALID_CLOSE_VOLUME": 10038,
		"TRADE_RETCODE_CLOSE_ORDER_EXIST":    10039,
		"TRADE_RETCODE_LIMIT_POSITIONS":      10040,
		"TRADE_RETCODE_REJECT_CANCEL":        10041,
		"TRADE_RETCODE_LONG_ONLY":            10042,
		"TRADE_RETCODE_SHORT_ONLY":           10043,
		"TRADE_RETCODE_CLOSE_ONLY":           10044,
		"TRADE_RETCODE_FIFO_CLOSE":           10045,
	}
)

func (x TradeReturnCode) Enum() *TradeReturnCode {
	p := new(TradeReturnCode)
	*p = x
	return p
}

func (x TradeReturnCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeReturnCode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (TradeReturnCode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x TradeReturnCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeReturnCode.Descriptor instead.
func (TradeReturnCode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

// Position Type
type PositionType int32

const (
	PositionType_POSITION_TYPE_BUY  PositionType = 0 // Buy
	PositionType_POSITION_TYPE_SELL PositionType = 1 // Sell
)

// Enum value maps for PositionType.
var (
	PositionType_name = map[int32]string{
		0: "POSITION_TYPE_BUY",
		1: "POSITION_TYPE_SELL",
	}
	PositionType_value = map[string]int32{
		"POSITION_TYPE_BUY":  0,
		"POSITION_TYPE_SELL": 1,
	}
)

func (x PositionType) Enum() *PositionType {
	p := new(PositionType)
	*p = x
	return p
}

func (x PositionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (PositionType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x PositionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionType.Descriptor instead.
func (PositionType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

// Tick Flags (bitmask)
type TickFlag int32

const (
	TickFlag_TICK_FLAG_UNSPECIFIED TickFlag = 0
	TickFlag_TICK_FLAG_BID         TickFlag = 2  // 0x02
	TickFlag_TICK_FLAG_ASK         TickFlag = 4  // 0x04
	TickFlag_TICK_FLAG_LAST        TickFlag = 8  // 0x08
	TickFlag_TICK_FLAG_VOLUME      TickFlag = 16 // 0x10
	TickFlag_TICK_FLAG_BUY         TickFlag = 32 // 0x20
	TickFlag_TICK_FLAG_SELL        TickFlag = 64 // 0x40
)

// Enum value maps for TickFlag.
var (
	TickFlag_name = map[int32]string{
		0:  "TICK_FLAG_UNSPECIFIED",
		2:  "TICK_FLAG_BID",
		4:  "TICK_FLAG_ASK",
		8:  "TICK_FLAG_LAST",
		16: "TICK_FLAG_VOLUME",
		32: "TICK_FLAG_BUY",
		64: "TICK_FLAG_SELL",
	}
	TickFlag_value = map[string]int32{
		"TICK_FLAG_UNSPECIFIED": 0,
		"TICK_FLAG_BID":         2,
		"TICK_FLAG_ASK":         4,
		"TICK_FLAG_LAST":        8,
		"TICK_FLAG_VOLUME":      16,
		"TICK_FLAG_BUY":         32,
		"TICK_FLAG_SELL":        64,
	}
)

func (x TickFlag) Enum() *TickFlag {
	p := new(TickFlag)
	*p = x
	return p
}

func (x TickFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TickFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (TickFlag) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x TickFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TickFlag.Descriptor instead.
func (TickFlag) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

// Position Reason
type PositionReason int32

const (
	PositionReason_POSITION_REASON_CLIENT PositionReason = 0 // From desktop terminal
	PositionReason_POSITION_REASON_MOBILE PositionReason = 1 // From mobile app
	PositionReason_POSITION_REASON_WEB    PositionReason = 2 // From web platform
	PositionReason_POSITION_REASON_EXPERT PositionReason = 3 // From MQL5 (Expert Advisor/script)
)

// Enum value maps for PositionReason.
var (
	PositionReason_name = map[int32]string{
		0: "POSITION_REASON_CLIENT",
		1: "POSITION_REASON_MOBILE",
		2: "POSITION_REASON_WEB",
		3: "POSITION_REASON_EXPERT",
	}
	PositionReason_value = map[string]int32{
		"POSITION_REASON_CLIENT": 0,
		"POSITION_REASON_MOBILE": 1,
		"POSITION_REASON_WEB":    2,
		"POSITION_REASON_EXPERT": 3,
	}
)

func (x PositionReason) Enum() *PositionReason {
	p := new(PositionReason)
	*p = x
	return p
}

func (x PositionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (PositionReason) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x PositionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionReason.Descriptor instead.
func (PositionReason) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

// Order State
type OrderState int32

const (
	OrderState_ORDER_STATE_STARTED        OrderState = 0 // Checked, not accepted
	OrderState_ORDER_STATE_PLACED         OrderState = 1 // Accepted
	OrderState_ORDER_STATE_CANCELED       OrderState = 2 // Canceled by client
	OrderState_ORDER_STATE_PARTIAL        OrderState = 3 // Partially executed
	OrderState_ORDER_STATE_FILLED         OrderState = 4 // Fully executed
	OrderState_ORDER_STATE_REJECTED       OrderState = 5 // Rejected
	OrderState_ORDER_STATE_EXPIRED        OrderState = 6 // Expired
	OrderState_ORDER_STATE_REQUEST_ADD    OrderState = 7 // Being registered
	OrderState_ORDER_STATE_REQUEST_MODIFY OrderState = 8 // Being modified
	OrderState_ORDER_STATE_REQUEST_CANCEL OrderState = 9 // Being canceled
)

// Enum value maps for OrderState.
var (
	OrderState_name = map[int32]string{
		0: "ORDER_STATE_STARTED",
		1: "ORDER_STATE_PLACED",
		2: "ORDER_STATE_CANCELED",
		3: "ORDER_STATE_PARTIAL",
		4: "ORDER_STATE_FILLED",
		5: "ORDER_STATE_REJECTED",
		6: "ORDER_STATE_EXPIRED",
		7: "ORDER_STATE_REQUEST_ADD",
		8: "ORDER_STATE_REQUEST_MODIFY",
		9: "ORDER_STATE_REQUEST_CANCEL",
	}
	OrderState_value = map[string]int32{
		"ORDER_STATE_STARTED":        0,
		"ORDER_STATE_PLACED":         1,
		"ORDER_STATE_CANCELED":       2,
		"ORDER_STATE_PARTIAL":        3,
		"ORDER_STATE_FILLED":         4,
		"ORDER_STATE_REJECTED":       5,
		"ORDER_STATE_EXPIRED":        6,
		"ORDER_STATE_REQUEST_ADD":    7,
		"ORDER_STATE_REQUEST_MODIFY": 8,
		"ORDER_STATE_REQUEST_CANCEL": 9,
	}
)

func (x OrderState) Enum() *OrderState {
	p := new(OrderState)
	*p = x
	return p
}

func (x OrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (OrderState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x OrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderState.Descriptor instead.
func (OrderState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

// Order Reason
type OrderReason int32

const (
	OrderReason_ORDER_REASON_CLIENT OrderReason = 0 // From desktop
	OrderReason_ORDER_REASON_MOBILE OrderReason = 1 // From mobile
	OrderReason_ORDER_REASON_WEB    OrderReason = 2 // From web
	OrderReason_ORDER_REASON_EXPERT OrderReason = 3 // From EA/script
	OrderReason_ORDER_REASON_SL     OrderReason = 4 // Stop Loss
	OrderReason_ORDER_REASON_TP     OrderReason = 5 // Take Profit
	OrderReason_ORDER_REASON_SO     OrderReason = 6 // Stop Out
)

// Enum value maps for OrderReason.
var (
	OrderReason_name = map[int32]string{
		0: "ORDER_REASON_CLIENT",
		1: "ORDER_REASON_MOBILE",
		2: "ORDER_REASON_WEB",
		3: "ORDER_REASON_EXPERT",
		4: "ORDER_REASON_SL",
		5: "ORDER_REASON_TP",
		6: "ORDER_REASON_SO",
	}
	OrderReason_value = map[string]int32{
		"ORDER_REASON_CLIENT": 0,
		"ORDER_REASON_MOBILE": 1,
		"ORDER_REASON_WEB":    2,
		"ORDER_REASON_EXPERT": 3,
		"ORDER_REASON_SL":     4,
		"ORDER_REASON_TP":     5,
		"ORDER_REASON_SO":     6,
	}
)

func (x OrderReason) Enum() *OrderReason {
	p := new(OrderReason)
	*p = x
	return p
}

func (x OrderReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderReason) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[11].Descriptor()
}

func (OrderReason) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[11]
}

func (x OrderReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderReason.Descriptor instead.
func (OrderReason) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{11}
}

// ENUM_DEAL_TYPE
type DealType int32

const (
	DealType_DEAL_TYPE_BUY                      DealType = 0
	DealType_DEAL_TYPE_SELL                     DealType = 1
	DealType_DEAL_TYPE_BALANCE                  DealType = 2
	DealType_DEAL_TYPE_CREDIT                   DealType = 3
	DealType_DEAL_TYPE_CHARGE                   DealType = 4
	DealType_DEAL_TYPE_CORRECTION               DealType = 5
	DealType_DEAL_TYPE_BONUS                    DealType = 6
	DealType_DEAL_TYPE_COMMISSION               DealType = 7
	DealType_DEAL_TYPE_COMMISSION_DAILY         DealType = 8
	DealType_DEAL_TYPE_COMMISSION_MONTHLY       DealType = 9
	DealType_DEAL_TYPE_COMMISSION_AGENT_DAILY   DealType = 10
	DealType_DEAL_TYPE_COMMISSION_AGENT_MONTHLY DealType = 11
	DealType_DEAL_TYPE_INTEREST                 DealType = 12
	DealType_DEAL_TYPE_BUY_CANCELED             DealType = 13
	DealType_DEAL_TYPE_SELL_CANCELED            DealType = 14
	DealType_DEAL_DIVIDEND                      DealType = 15
	DealType_DEAL_DIVIDEND_FRANKED              DealType = 16
	DealType_DEAL_TAX                           DealType = 17
)

// Enum value maps for DealType.
var (
	DealType_name = map[int32]string{
		0:  "DEAL_TYPE_BUY",
		1:  "DEAL_TYPE_SELL",
		2:  "DEAL_TYPE_BALANCE",
		3:  "DEAL_TYPE_CREDIT",
		4:  "DEAL_TYPE_CHARGE",
		5:  "DEAL_TYPE_CORRECTION",
		6:  "DEAL_TYPE_BONUS",
		7:  "DEAL_TYPE_COMMISSION",
		8:  "DEAL_TYPE_COMMISSION_DAILY",
		9:  "DEAL_TYPE_COMMISSION_MONTHLY",
		10: "DEAL_TYPE_COMMISSION_AGENT_DAILY",
		11: "DEAL_TYPE_COMMISSION_AGENT_MONTHLY",
		12: "DEAL_TYPE_INTEREST",
		13: "DEAL_TYPE_BUY_CANCELED",
		14: "DEAL_TYPE_SELL_CANCELED",
		15: "DEAL_DIVIDEND",
		16: "DEAL_DIVIDEND_FRANKED",
		17: "DEAL_TAX",
	}
	DealType_value = map[string]int32{
		"DEAL_TYPE_BUY":                      0,
		"DEAL_TYPE_SELL":                     1,
		"DEAL_TYPE_BALANCE":                  2,
		"DEAL_TYPE_CREDIT":                   3,
		"DEAL_TYPE_CHARGE":                   4,
		"DEAL_TYPE_CORRECTION":               5,
		"DEAL_TYPE_BONUS":                    6,
		"DEAL_TYPE_COMMISSION":               7,
		"DEAL_TYPE_COMMISSION_DAILY":         8,
		"DEAL_TYPE_COMMISSION_MONTHLY":       9,
		"DEAL_TYPE_COMMISSION_AGENT_DAILY":   10,
		"DEAL_TYPE_COMMISSION_AGENT_MONTHLY": 11,
		"DEAL_TYPE_INTEREST":                 12,
		"DEAL_TYPE_BUY_CANCELED":             13,
		"DEAL_TYPE_SELL_CANCELED":            14,
		"DEAL_DIVIDEND":                      15,
		"DEAL_DIVIDEND_FRANKED":              16,
		"DEAL_TAX":                           17,
	}
)

func (x DealType) Enum() *DealType {
	p := new(DealType)
	*p = x
	return p
}

func (x DealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[12].Descriptor()
}

func (DealType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[12]
}

func (x DealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealType.Descriptor instead.
func (DealType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{12}
}

// ENUM_DEAL_ENTRY
type DealEntry int32

const (
	DealEntry_DEAL_ENTRY_IN     DealEntry = 0
	DealEntry_DEAL_ENTRY_OUT    DealEntry = 1
	DealEntry_DEAL_ENTRY_INOUT  DealEntry = 2
	DealEntry_DEAL_ENTRY_OUT_BY DealEntry = 3
)

// Enum value maps for DealEntry.
var (
	DealEntry_name = map[int32]string{
		0: "DEAL_ENTRY_IN",
		1: "DEAL_ENTRY_OUT",
		2: "DEAL_ENTRY_INOUT",
		3: "DEAL_ENTRY_OUT_BY",
	}
	DealEntry_value = map[string]int32{
		"DEAL_ENTRY_IN":     0,
		"DEAL_ENTRY_OUT":    1,
		"DEAL_ENTRY_INOUT":  2,
		"DEAL_ENTRY_OUT_BY": 3,
	}
)

func (x DealEntry) Enum() *DealEntry {
	p := new(DealEntry)
	*p = x
	return p
}

func (x DealEntry) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealEntry) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[13].Descriptor()
}

func (DealEntry) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[13]
}

func (x DealEntry) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealEntry.Descriptor instead.
func (DealEntry) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{13}
}

// ENUM_DEAL_REASON
type DealReason int32

const (
	DealReason_DEAL_REASON_CLIENT   DealReason = 0
	DealReason_DEAL_REASON_MOBILE   DealReason = 1
	DealReason_DEAL_REASON_WEB      DealReason = 2
	DealReason_DEAL_REASON_EXPERT   DealReason = 3
	DealReason_DEAL_REASON_SL       DealReason = 4
	DealReason_DEAL_REASON_TP       DealReason = 5
	DealReason_DEAL_REASON_SO       DealReason = 6
	DealReason_DEAL_REASON_ROLLOVER DealReason = 7
	DealReason_DEAL_REASON_VMARGIN  DealReason = 8
	DealReason_DEAL_REASON_SPLIT    DealReason = 9
)

// Enum value maps for DealReason.
var (
	DealReason_name = map[int32]string{
		0: "DEAL_REASON_CLIENT",
		1: "DEAL_REASON_MOBILE",
		2: "DEAL_REASON_WEB",
		3: "DEAL_REASON_EXPERT",
		4: "DEAL_REASON_SL",
		5: "DEAL_REASON_TP",
		6: "DEAL_REASON_SO",
		7: "DEAL_REASON_ROLLOVER",
		8: "DEAL_REASON_VMARGIN",
		9: "DEAL_REASON_SPLIT",
	}
	DealReason_value = map[string]int32{
		"DEAL_REASON_CLIENT":   0,
		"DEAL_REASON_MOBILE":   1,
		"DEAL_REASON_WEB":      2,
		"DEAL_REASON_EXPERT":   3,
		"DEAL_REASON_SL":       4,
		"DEAL_REASON_TP":       5,
		"DEAL_REASON_SO":       6,
		"DEAL_REASON_ROLLOVER": 7,
		"DEAL_REASON_VMARGIN":  8,
		"DEAL_REASON_SPLIT":    9,
	}
)

func (x DealReason) Enum() *DealReason {
	p := new(DealReason)
	*p = x
	return p
}

func (x DealReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealReason) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[14].Descriptor()
}

func (DealReason) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[14]
}

func (x DealReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealReason.Descriptor instead.
func (DealReason) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{14}
}

// ENUM_ACCOUNT_TRADE_MODE
type AccountTradeMode int32

const (
	AccountTradeMode_ACCOUNT_TRADE_MODE_DEMO    AccountTradeMode = 0
	AccountTradeMode_ACCOUNT_TRADE_MODE_CONTEST AccountTradeMode = 1
	AccountTradeMode_ACCOUNT_TRADE_MODE_REAL    AccountTradeMode = 2
)

// Enum value maps for AccountTradeMode.
var (
	AccountTradeMode_name = map[int32]string{
		0: "ACCOUNT_TRADE_MODE_DEMO",
		1: "ACCOUNT_TRADE_MODE_CONTEST",
		2: "ACCOUNT_TRADE_MODE_REAL",
	}
	AccountTradeMode_value = map[string]int32{
		"ACCOUNT_TRADE_MODE_DEMO":    0,
		"ACCOUNT_TRADE_MODE_CONTEST": 1,
		"ACCOUNT_TRADE_MODE_REAL":    2,
	}
)

func (x AccountTradeMode) Enum() *AccountTradeMode {
	p := new(AccountTradeMode)
	*p = x
	return p
}

func (x AccountTradeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountTradeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[15].Descriptor()
}

func (AccountTradeMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[15]
}

func (x AccountTradeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountTradeMode.Descriptor instead.
func (AccountTradeMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{15}
}

// ENUM_ACCOUNT_STOPOUT_MODE
type AccountStopoutMode int32

const (
	AccountStopoutMode_ACCOUNT_STOPOUT_MODE_PERCENT AccountStopoutMode = 0
	AccountStopoutMode_ACCOUNT_STOPOUT_MODE_MONEY   AccountStopoutMode = 1
)

// Enum value maps for AccountStopoutMode.
var (
	AccountStopoutMode_name = map[int32]string{
		0: "ACCOUNT_STOPOUT_MODE_PERCENT",
		1: "ACCOUNT_STOPOUT_MODE_MONEY",
	}
	AccountStopoutMode_value = map[string]int32{
		"ACCOUNT_STOPOUT_MODE_PERCENT": 0,
		"ACCOUNT_STOPOUT_MODE_MONEY":   1,
	}
)

func (x AccountStopoutMode) Enum() *AccountStopoutMode {
	p := new(AccountStopoutMode)
	*p = x
	return p
}

func (x AccountStopoutMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStopoutMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[16].Descriptor()
}

func (AccountStopoutMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[16]
}

func (x AccountStopoutMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStopoutMode.Descriptor instead.
func (AccountStopoutMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{16}
}

// ENUM_ACCOUNT_MARGIN_MODE
type AccountMarginMode int32

const (
	AccountMarginMode_ACCOUNT_MARGIN_MODE_RETAIL_NETTING AccountMarginMode = 0
	AccountMarginMode_ACCOUNT_MARGIN_MODE_EXCHANGE       AccountMarginMode = 1
	AccountMarginMode_ACCOUNT_MARGIN_MODE_RETAIL_HEDGING AccountMarginMode = 2
)

// Enum value maps for AccountMarginMode.
var (
	AccountMarginMode_name = map[int32]string{
		0: "ACCOUNT_MARGIN_MODE_RETAIL_NETTING",
		1: "ACCOUNT_MARGIN_MODE_EXCHANGE",
		2: "ACCOUNT_MARGIN_MODE_RETAIL_HEDGING",
	}
	AccountMarginMode_value = map[string]int32{
		"ACCOUNT_MARGIN_MODE_RETAIL_NETTING": 0,
		"ACCOUNT_MARGIN_MODE_EXCHANGE":       1,
		"ACCOUNT_MARGIN_MODE_RETAIL_HEDGING": 2,
	}
)

func (x AccountMarginMode) Enum() *AccountMarginMode {
	p := new(AccountMarginMode)
	*p = x
	return p
}

func (x AccountMarginMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountMarginMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[17].Descriptor()
}

func (AccountMarginMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[17]
}

func (x AccountMarginMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountMarginMode.Descriptor instead.
func (AccountMarginMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{17}
}

// ENUM_SYMBOL_CHART_MODE
type SymbolChartMode int32

const (
	SymbolChartMode_SYMBOL_CHART_MODE_BID  SymbolChartMode = 0
	SymbolChartMode_SYMBOL_CHART_MODE_LAST SymbolChartMode = 1
)

// Enum value maps for SymbolChartMode.
var (
	SymbolChartMode_name = map[int32]string{
		0: "SYMBOL_CHART_MODE_BID",
		1: "SYMBOL_CHART_MODE_LAST",
	}
	SymbolChartMode_value = map[string]int32{
		"SYMBOL_CHART_MODE_BID":  0,
		"SYMBOL_CHART_MODE_LAST": 1,
	}
)

func (x SymbolChartMode) Enum() *SymbolChartMode {
	p := new(SymbolChartMode)
	*p = x
	return p
}

func (x SymbolChartMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolChartMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[18].Descriptor()
}

func (SymbolChartMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[18]
}

func (x SymbolChartMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolChartMode.Descriptor instead.
func (SymbolChartMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{18}
}

// ENUM_SYMBOL_CALC_MODE
type SymbolCalcMode int32

const (
	SymbolCalcMode_SYMBOL_CALC_MODE_FOREX               SymbolCalcMode = 0
	SymbolCalcMode_SYMBOL_CALC_MODE_FUTURES             SymbolCalcMode = 1
	SymbolCalcMode_SYMBOL_CALC_MODE_CFD                 SymbolCalcMode = 2
	SymbolCalcMode_SYMBOL_CALC_MODE_CFDINDEX            SymbolCalcMode = 3
	SymbolCalcMode_SYMBOL_CALC_MODE_CFDLEVERAGE         SymbolCalcMode = 4
	SymbolCalcMode_SYMBOL_CALC_MODE_FOREX_NO_LEVERAGE   SymbolCalcMode = 5
	SymbolCalcMode_SYMBOL_CALC_MODE_EXCH_STOCKS         SymbolCalcMode = 32
	SymbolCalcMode_SYMBOL_CALC_MODE_EXCH_FUTURES        SymbolCalcMode = 33
	SymbolCalcMode_SYMBOL_CALC_MODE_EXCH_OPTIONS        SymbolCalcMode = 34
	SymbolCalcMode_SYMBOL_CALC_MODE_EXCH_OPTIONS_MARGIN SymbolCalcMode = 36
	SymbolCalcMode_SYMBOL_CALC_MODE_EXCH_BONDS          SymbolCalcMode = 37
	SymbolCalcMode_SYMBOL_CALC_MODE_EXCH_STOCKS_MOEX    SymbolCalcMode = 38
	SymbolCalcMode_SYMBOL_CALC_MODE_EXCH_BONDS_MOEX     SymbolCalcMode = 39
	SymbolCalcMode_SYMBOL_CALC_MODE_SERV_COLLATERAL     SymbolCalcMode = 64
)

// Enum value maps for SymbolCalcMode.
var (
	SymbolCalcMode_name = map[int32]string{
		0:  "SYMBOL_CALC_MODE_FOREX",
		1:  "SYMBOL_CALC_MODE_FUTURES",
		2:  "SYMBOL_CALC_MODE_CFD",
		3:  "SYMBOL_CALC_MODE_CFDINDEX",
		4:  "SYMBOL_CALC_MODE_CFDLEVERAGE",
		5:  "SYMBOL_CALC_MODE_FOREX_NO_LEVERAGE",
		32: "SYMBOL_CALC_MODE_EXCH_STOCKS",
		33: "SYMBOL_CALC_MODE_EXCH_FUTURES",
		34: "SYMBOL_CALC_MODE_EXCH_OPTIONS",
		36: "SYMBOL_CALC_MODE_EXCH_OPTIONS_MARGIN",
		37: "SYMBOL_CALC_MODE_EXCH_BONDS",
		38: "SYMBOL_CALC_MODE_EXCH_STOCKS_MOEX",
		39: "SYMBOL_CALC_MODE_EXCH_BONDS_MOEX",
		64: "SYMBOL_CALC_MODE_SERV_COLLATERAL",
	}
	SymbolCalcMode_value = map[string]int32{
		"SYMBOL_CALC_MODE_FOREX":               0,
		"SYMBOL_CALC_MODE_FUTURES":             1,
		"SYMBOL_CALC_MODE_CFD":                 2,
		"SYMBOL_CALC_MODE_CFDINDEX":            3,
		"SYMBOL_CALC_MODE_CFDLEVERAGE":         4,
		"SYMBOL_CALC_MODE_FOREX_NO_LEVERAGE":   5,
		"SYMBOL_CALC_MODE_EXCH_STOCKS":         32,
		"SYMBOL_CALC_MODE_EXCH_FUTURES":        33,
		"SYMBOL_CALC_MODE_EXCH_OPTIONS":        34,
		"SYMBOL_CALC_MODE_EXCH_OPTIONS_MARGIN": 36,
		"SYMBOL_CALC_MODE_EXCH_BONDS":          37,
		"SYMBOL_CALC_MODE_EXCH_STOCKS_MOEX":    38,
		"SYMBOL_CALC_MODE_EXCH_BONDS_MOEX":     39,
		"SYMBOL_CALC_MODE_SERV_COLLATERAL":     64,
	}
)

func (x SymbolCalcMode) Enum() *SymbolCalcMode {
	p := new(SymbolCalcMode)
	*p = x
	return p
}

func (x SymbolCalcMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolCalcMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[19].Descriptor()
}

func (SymbolCalcMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[19]
}

func (x SymbolCalcMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolCalcMode.Descriptor instead.
func (SymbolCalcMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{19}
}

// ENUM_SYMBOL_TRADE_MODE
type SymbolTradeMode int32

const (
	SymbolTradeMode_SYMBOL_TRADE_MODE_DISABLED  SymbolTradeMode = 0
	SymbolTradeMode_SYMBOL_TRADE_MODE_LONGONLY  SymbolTradeMode = 1
	SymbolTradeMode_SYMBOL_TRADE_MODE_SHORTONLY SymbolTradeMode = 2
	SymbolTradeMode_SYMBOL_TRADE_MODE_CLOSEONLY SymbolTradeMode = 3
	SymbolTradeMode_SYMBOL_TRADE_MODE_FULL      SymbolTradeMode = 4
)

// Enum value maps for SymbolTradeMode.
var (
	SymbolTradeMode_name = map[int32]string{
		0: "SYMBOL_TRADE_MODE_DISABLED",
		1: "SYMBOL_TRADE_MODE_LONGONLY",
		2: "SYMBOL_TRADE_MODE_SHORTONLY",
		3: "SYMBOL_TRADE_MODE_CLOSEONLY",
		4: "SYMBOL_TRADE_MODE_FULL",
	}
	SymbolTradeMode_value = map[string]int32{
		"SYMBOL_TRADE_MODE_DISABLED":  0,
		"SYMBOL_TRADE_MODE_LONGONLY":  1,
		"SYMBOL_TRADE_MODE_SHORTONLY": 2,
		"SYMBOL_TRADE_MODE_CLOSEONLY": 3,
		"SYMBOL_TRADE_MODE_FULL":      4,
	}
)

func (x SymbolTradeMode) Enum() *SymbolTradeMode {
	p := new(SymbolTradeMode)
	*p = x
	return p
}

func (x SymbolTradeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolTradeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[20].Descriptor()
}

func (SymbolTradeMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[20]
}

func (x SymbolTradeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolTradeMode.Descriptor instead.
func (SymbolTradeMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{20}
}

// ENUM_SYMBOL_TRADE_EXECUTION
type SymbolTradeExecution int32

const (
	SymbolTradeExecution_SYMBOL_TRADE_EXECUTION_REQUEST  SymbolTradeExecution = 0
	SymbolTradeExecution_SYMBOL_TRADE_EXECUTION_INSTANT  SymbolTradeExecution = 1
	SymbolTradeExecution_SYMBOL_TRADE_EXECUTION_MARKET   SymbolTradeExecution = 2
	SymbolTradeExecution_SYMBOL_TRADE_EXECUTION_EXCHANGE SymbolTradeExecution = 3
)

// Enum value maps for SymbolTradeExecution.
var (
	SymbolTradeExecution_name = map[int32]string{
		0: "SYMBOL_TRADE_EXECUTION_REQUEST",
		1: "SYMBOL_TRADE_EXECUTION_INSTANT",
		2: "SYMBOL_TRADE_EXECUTION_MARKET",
		3: "SYMBOL_TRADE_EXECUTION_EXCHANGE",
	}
	SymbolTradeExecution_value = map[string]int32{
		"SYMBOL_TRADE_EXECUTION_REQUEST":  0,
		"SYMBOL_TRADE_EXECUTION_INSTANT":  1,
		"SYMBOL_TRADE_EXECUTION_MARKET":   2,
		"SYMBOL_TRADE_EXECUTION_EXCHANGE": 3,
	}
)

func (x SymbolTradeExecution) Enum() *SymbolTradeExecution {
	p := new(SymbolTradeExecution)
	*p = x
	return p
}

func (x SymbolTradeExecution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolTradeExecution) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[21].Descriptor()
}

func (SymbolTradeExecution) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[21]
}

func (x SymbolTradeExecution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolTradeExecution.Descriptor instead.
func (SymbolTradeExecution) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{21}
}

// ENUM_SYMBOL_SWAP_MODE
type SymbolSwapMode int32

const (
	SymbolSwapMode_SYMBOL_SWAP_MODE_DISABLED         SymbolSwapMode = 0
	SymbolSwapMode_SYMBOL_SWAP_MODE_POINTS           SymbolSwapMode = 1
	SymbolSwapMode_SYMBOL_SWAP_MODE_CURRENCY_SYMBOL  SymbolSwapMode = 2
	SymbolSwapMode_SYMBOL_SWAP_MODE_CURRENCY_MARGIN  SymbolSwapMode = 3
	SymbolSwapMode_SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT SymbolSwapMode = 4
	SymbolSwapMode_SYMBOL_SWAP_MODE_INTEREST_CURRENT SymbolSwapMode = 5
	SymbolSwapMode_SYMBOL_SWAP_MODE_INTEREST_OPEN    SymbolSwapMode = 6
	SymbolSwapMode_SYMBOL_SWAP_MODE_REOPEN_CURRENT   SymbolSwapMode = 7
	SymbolSwapMode_SYMBOL_SWAP_MODE_REOPEN_BID       SymbolSwapMode = 8
)

// Enum value maps for SymbolSwapMode.
var (
	SymbolSwapMode_name = map[int32]string{
		0: "SYMBOL_SWAP_MODE_DISABLED",
		1: "SYMBOL_SWAP_MODE_POINTS",
		2: "SYMBOL_SWAP_MODE_CURRENCY_SYMBOL",
		3: "SYMBOL_SWAP_MODE_CURRENCY_MARGIN",
		4: "SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT",
		5: "SYMBOL_SWAP_MODE_INTEREST_CURRENT",
		6: "SYMBOL_SWAP_MODE_INTEREST_OPEN",
		7: "SYMBOL_SWAP_MODE_REOPEN_CURRENT",
		8: "SYMBOL_SWAP_MODE_REOPEN_BID",
	}
	SymbolSwapMode_value = map[string]int32{
		"SYMBOL_SWAP_MODE_DISABLED":         0,
		"SYMBOL_SWAP_MODE_POINTS":           1,
		"SYMBOL_SWAP_MODE_CURRENCY_SYMBOL":  2,
		"SYMBOL_SWAP_MODE_CURRENCY_MARGIN":  3,
		"SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT": 4,
		"SYMBOL_SWAP_MODE_INTEREST_CURRENT": 5,
		"SYMBOL_SWAP_MODE_INTEREST_OPEN":    6,
		"SYMBOL_SWAP_MODE_REOPEN_CURRENT":   7,
		"SYMBOL_SWAP_MODE_REOPEN_BID":       8,
	}
)

func (x SymbolSwapMode) Enum() *SymbolSwapMode {
	p := new(SymbolSwapMode)
	*p = x
	return p
}

func (x SymbolSwapMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolSwapMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[22].Descriptor()
}

func (SymbolSwapMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[22]
}

func (x SymbolSwapMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolSwapMode.Descriptor instead.
func (SymbolSwapMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{22}
}

// ENUM_DAY_OF_WEEK
type DayOfWeek int32

const (
	DayOfWeek_DAY_OF_WEEK_SUNDAY    DayOfWeek = 0
	DayOfWeek_DAY_OF_WEEK_MONDAY    DayOfWeek = 1
	DayOfWeek_DAY_OF_WEEK_TUESDAY   DayOfWeek = 2
	DayOfWeek_DAY_OF_WEEK_WEDNESDAY DayOfWeek = 3
	DayOfWeek_DAY_OF_WEEK_THURSDAY  DayOfWeek = 4
	DayOfWeek_DAY_OF_WEEK_FRIDAY    DayOfWeek = 5
	DayOfWeek_DAY_OF_WEEK_SATURDAY  DayOfWeek = 6
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "DAY_OF_WEEK_SUNDAY",
		1: "DAY_OF_WEEK_MONDAY",
		2: "DAY_OF_WEEK_TUESDAY",
		3: "DAY_OF_WEEK_WEDNESDAY",
		4: "DAY_OF_WEEK_THURSDAY",
		5: "DAY_OF_WEEK_FRIDAY",
		6: "DAY_OF_WEEK_SATURDAY",
	}
	DayOfWeek_value = map[string]int32{
		"DAY_OF_WEEK_SUNDAY":    0,
		"DAY_OF_WEEK_MONDAY":    1,
		"DAY_OF_WEEK_TUESDAY":   2,
		"DAY_OF_WEEK_WEDNESDAY": 3,
		"DAY_OF_WEEK_THURSDAY":  4,
		"DAY_OF_WEEK_FRIDAY":    5,
		"DAY_OF_WEEK_SATURDAY":  6,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[23].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[23]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{23}
}

// ENUM_SYMBOL_ORDER_GTC_MODE
type SymbolOrderGTCMode int32

const (
	SymbolOrderGTCMode_SYMBOL_ORDERS_GTC            SymbolOrderGTCMode = 0
	SymbolOrderGTCMode_SYMBOL_ORDERS_DAILY          SymbolOrderGTCMode = 1
	SymbolOrderGTCMode_SYMBOL_ORDERS_DAILY_NO_STOPS SymbolOrderGTCMode = 2
)

// Enum value maps for SymbolOrderGTCMode.
var (
	SymbolOrderGTCMode_name = map[int32]string{
		0: "SYMBOL_ORDERS_GTC",
		1: "SYMBOL_ORDERS_DAILY",
		2: "SYMBOL_ORDERS_DAILY_NO_STOPS",
	}
	SymbolOrderGTCMode_value = map[string]int32{
		"SYMBOL_ORDERS_GTC":            0,
		"SYMBOL_ORDERS_DAILY":          1,
		"SYMBOL_ORDERS_DAILY_NO_STOPS": 2,
	}
)

func (x SymbolOrderGTCMode) Enum() *SymbolOrderGTCMode {
	p := new(SymbolOrderGTCMode)
	*p = x
	return p
}

func (x SymbolOrderGTCMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolOrderGTCMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[24].Descriptor()
}

func (SymbolOrderGTCMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[24]
}

func (x SymbolOrderGTCMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolOrderGTCMode.Descriptor instead.
func (SymbolOrderGTCMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{24}
}

// ENUM_SYMBOL_OPTION_RIGHT
type SymbolOptionRight int32

const (
	SymbolOptionRight_SYMBOL_OPTION_RIGHT_CALL SymbolOptionRight = 0
	SymbolOptionRight_SYMBOL_OPTION_RIGHT_PUT  SymbolOptionRight = 1
)

// Enum value maps for SymbolOptionRight.
var (
	SymbolOptionRight_name = map[int32]string{
		0: "SYMBOL_OPTION_RIGHT_CALL",
		1: "SYMBOL_OPTION_RIGHT_PUT",
	}
	SymbolOptionRight_value = map[string]int32{
		"SYMBOL_OPTION_RIGHT_CALL": 0,
		"SYMBOL_OPTION_RIGHT_PUT":  1,
	}
)

func (x SymbolOptionRight) Enum() *SymbolOptionRight {
	p := new(SymbolOptionRight)
	*p = x
	return p
}

func (x SymbolOptionRight) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolOptionRight) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[25].Descriptor()
}

func (SymbolOptionRight) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[25]
}

func (x SymbolOptionRight) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolOptionRight.Descriptor instead.
func (SymbolOptionRight) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{25}
}

// ENUM_SYMBOL_OPTION_MODE
type SymbolOptionMode int32

const (
	SymbolOptionMode_SYMBOL_OPTION_MODE_EUROPEAN SymbolOptionMode = 0
	SymbolOptionMode_SYMBOL_OPTION_MODE_AMERICAN SymbolOptionMode = 1
)

// Enum value maps for SymbolOptionMode.
var (
	SymbolOptionMode_name = map[int32]string{
		0: "SYMBOL_OPTION_MODE_EUROPEAN",
		1: "SYMBOL_OPTION_MODE_AMERICAN",
	}
	SymbolOptionMode_value = map[string]int32{
		"SYMBOL_OPTION_MODE_EUROPEAN": 0,
		"SYMBOL_OPTION_MODE_AMERICAN": 1,
	}
)

func (x SymbolOptionMode) Enum() *SymbolOptionMode {
	p := new(SymbolOptionMode)
	*p = x
	return p
}

func (x SymbolOptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolOptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[26].Descriptor()
}

func (SymbolOptionMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[26]
}

func (x SymbolOptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolOptionMode.Descriptor instead.
func (SymbolOptionMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{26}
}

var File_enums_proto protoreflect.FileDescriptor

const file_enums_proto_rawDesc = "" +
	"\n" +
	"\venums.proto*\xbb\x03\n" +
	"\tTimeFrame\x12\x19\n" +
	"\x15TIMEFRAME_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fTIMEFRAME_M1\x10\x01\x12\x10\n" +
	"\fTIMEFRAME_M2\x10\x02\x12\x10\n" +
	"\fTIMEFRAME_M3\x10\x03\x12\x10\n" +
	"\fTIMEFRAME_M4\x10\x04\x12\x10\n" +
	"\fTIMEFRAME_M5\x10\x05\x12\x10\n" +
	"\fTIMEFRAME_M6\x10\x06\x12\x11\n" +
	"\rTIMEFRAME_M10\x10\n" +
	"\x12\x11\n" +
	"\rTIMEFRAME_M12\x10\f\x12\x11\n" +
	"\rTIMEFRAME_M15\x10\x0f\x12\x11\n" +
	"\rTIMEFRAME_M20\x10\x14\x12\x11\n" +
	"\rTIMEFRAME_M30\x10\x1e\x12\x12\n" +
	"\fTIMEFRAME_H1\x10\x81\x80\x01\x12\x12\n" +
	"\fTIMEFRAME_H2\x10\x82\x80\x01\x12\x12\n" +
	"\fTIMEFRAME_H3\x10\x83\x80\x01\x12\x12\n" +
	"\fTIMEFRAME_H4\x10\x84\x80\x01\x12\x12\n" +
	"\fTIMEFRAME_H6\x10\x86\x80\x01\x12\x12\n" +
	"\fTIMEFRAME_H8\x10\x88\x80\x01\x12\x13\n" +
	"\rTIMEFRAME_H12\x10\x8c\x80\x01\x12\x12\n" +
	"\fTIMEFRAME_D1\x10\x98\x80\x01\x12\x12\n" +
	"\fTIMEFRAME_W1\x10\x81\x80\x02\x12\x13\n" +
	"\rTIMEFRAME_MN1\x10\x81\x80\x03*k\n" +
	"\tOrderTime\x12\x12\n" +
	"\x0eORDER_TIME_GTC\x10\x00\x12\x12\n" +
	"\x0eORDER_TIME_DAY\x10\x01\x12\x18\n" +
	"\x14ORDER_TIME_SPECIFIED\x10\x02\x12\x1c\n" +
	"\x18ORDER_TIME_SPECIFIED_DAY\x10\x03*q\n" +
	"\x10OrderTypeFilling\x12\x15\n" +
	"\x11ORDER_FILLING_FOK\x10\x00\x12\x15\n" +
	"\x11ORDER_FILLING_IOC\x10\x01\x12\x18\n" +
	"\x14ORDER_FILLING_RETURN\x10\x02\x12\x15\n" +
	"\x11ORDER_FILLING_BOC\x10\x03*\xc0\x01\n" +
	"\vTradeAction\x12\x1c\n" +
	"\x18TRADE_ACTION_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TRADE_ACTION_DEAL\x10\x01\x12\x18\n" +
	"\x14TRADE_ACTION_PENDING\x10\x05\x12\x15\n" +
	"\x11TRADE_ACTION_SLTP\x10\x06\x12\x17\n" +
	"\x13TRADE_ACTION_MODIFY\x10\a\x12\x17\n" +
	"\x13TRADE_ACTION_REMOVE\x10\b\x12\x19\n" +
	"\x15TRADE_ACTION_CLOSE_BY\x10\n" +
	"*\xf4\x01\n" +
	"\tOrderType\x12\x12\n" +
	"\x0eORDER_TYPE_BUY\x10\x00\x12\x13\n" +
	"\x0fORDER_TYPE_SELL\x10\x01\x12\x18\n" +
	"\x14ORDER_TYPE_BUY_LIMIT\x10\x02\x12\x19\n" +
	"\x15ORDER_TYPE_SELL_LIMIT\x10\x03\x12\x17\n" +
	"\x13ORDER_TYPE_BUY_STOP\x10\x04\x12\x18\n" +
	"\x14ORDER_TYPE_SELL_STOP\x10\x05\x12\x1d\n" +
	"\x19ORDER_TYPE_BUY_STOP_LIMIT\x10\x06\x12\x1e\n" +
	"\x1aORDER_TYPE_SELL_STOP_LIMIT\x10\a\x12\x17\n" +
	"\x13ORDER_TYPE_CLOSE_BY\x10\b*\x81\x01\n" +
	"\bBookType\x12\x19\n" +
	"\x15BOOK_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eBOOK_TYPE_SELL\x10\x01\x12\x11\n" +
	"\rBOOK_TYPE_BUY\x10\x02\x12\x19\n" +
	"\x15BOOK_TYPE_SELL_MARKET\x10\x03\x12\x18\n" +
	"\x14BOOK_TYPE_BUY_MARKET\x10\x04*\xba\n" +
	"\n" +
	"\x0fTradeReturnCode\x12\x1d\n" +
	"\x19TRADE_RETCODE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x15TRADE_RETCODE_REQUOTE\x10\x94N\x12\x19\n" +
	"\x14TRADE_RETCODE_REJECT\x10\x96N\x12\x19\n" +
	"\x14TRADE_RETCODE_CANCEL\x10\x97N\x12\x19\n" +
	"\x14TRADE_RETCODE_PLACED\x10\x98N\x12\x17\n" +
	"\x12TRADE_RETCODE_DONE\x10\x99N\x12\x1f\n" +
	"\x1aTRADE_RETCODE_DONE_PARTIAL\x10\x9aN\x12\x18\n" +
	"\x13TRADE_RETCODE_ERROR\x10\x9bN\x12\x1a\n" +
	"\x15TRADE_RETCODE_TIMEOUT\x10\x9cN\x12\x1a\n" +
	"\x15TRADE_RETCODE_INVALID\x10\x9dN\x12!\n" +
	"\x1cTRADE_RETCODE_INVALID_VOLUME\x10\x9eN\x12 \n" +
	"\x1bTRADE_RETCODE_INVALID_PRICE\x10\x9fN\x12 \n" +
	"\x1bTRADE_RETCODE_INVALID_STOPS\x10\xa0N\x12!\n" +
	"\x1cTRADE_RETCODE_TRADE_DISABLED\x10\xa1N\x12 \n" +
	"\x1bTRADE_RETCODE_MARKET_CLOSED\x10\xa2N\x12\x1b\n" +
	"\x16TRADE_RETCODE_NO_MONEY\x10\xa3N\x12 \n" +
	"\x1bTRADE_RETCODE_PRICE_CHANGED\x10\xa4N\x12\x1c\n" +
	"\x17TRADE_RETCODE_PRICE_OFF\x10\xa5N\x12%\n" +
	" TRADE_RETCODE_INVALID_EXPIRATION\x10\xa6N\x12 \n" +
	"\x1bTRADE_RETCODE_ORDER_CHANGED\x10\xa7N\x12$\n" +
	"\x1fTRADE_RETCODE_TOO_MANY_REQUESTS\x10\xa8N\x12\x1d\n" +
	"\x18TRADE_RETCODE_NO_CHANGES\x10\xa9N\x12%\n" +
	" TRADE_RETCODE_SERVER_DISABLES_AT\x10\xaaN\x12%\n" +
	" TRADE_RETCODE_CLIENT_DISABLES_AT\x10\xabN\x12\x19\n" +
	"\x14TRADE_RETCODE_LOCKED\x10\xacN\x12\x19\n" +
	"\x14TRADE_RETCODE_FROZEN\x10\xadN\x12\x1f\n" +
	"\x1aTRADE_RETCODE_INVALID_FILL\x10\xaeN\x12\x1d\n" +
	"\x18TRADE_RETCODE_CONNECTION\x10\xafN\x12\x1c\n" +
	"\x17TRADE_RETCODE_ONLY_REAL\x10\xb0N\x12\x1f\n" +
	"\x1aTRADE_RETCODE_LIMIT_ORDERS\x10\xb1N\x12\x1f\n" +
	"\x1aTRADE_RETCODE_LIMIT_VOLUME\x10\xb2N\x12 \n" +
	"\x1bTRADE_RETCODE_INVALID_ORDER\x10\xb3N\x12\"\n" +
	"\x1dTRADE_RETCODE_POSITION_CLOSED\x10\xb4N\x12'\n" +
	"\"TRADE_RETCODE_INVALID_CLOSE_VOLUME\x10\xb6N\x12$\n" +
	"\x1fTRADE_RETCODE_CLOSE_ORDER_EXIST\x10\xb7N\x12\"\n" +
	"\x1dTRADE_RETCODE_LIMIT_POSITIONS\x10\xb8N\x12 \n" +
	"\x1bTRADE_RETCODE_REJECT_CANCEL\x10\xb9N\x12\x1c\n" +
	"\x17TRADE_RETCODE_LONG_ONLY\x10\xbaN\x12\x1d\n" +
	"\x18TRADE_RETCODE_SHORT_ONLY\x10\xbbN\x12\x1d\n" +
	"\x18TRADE_RETCODE_CLOSE_ONLY\x10\xbcN\x12\x1d\n" +
	"\x18TRADE_RETCODE_FIFO_CLOSE\x10\xbdN*=\n" +
	"\fPositionType\x12\x15\n" +
	"\x11POSITION_TYPE_BUY\x10\x00\x12\x16\n" +
	"\x12POSITION_TYPE_SELL\x10\x01*\x9c\x01\n" +
	"\bTickFlag\x12\x19\n" +
	"\x15TICK_FLAG_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rTICK_FLAG_BID\x10\x02\x12\x11\n" +
	"\rTICK_FLAG_ASK\x10\x04\x12\x12\n" +
	"\x0eTICK_FLAG_LAST\x10\b\x12\x14\n" +
	"\x10TICK_FLAG_VOLUME\x10\x10\x12\x11\n" +
	"\rTICK_FLAG_BUY\x10 \x12\x12\n" +
	"\x0eTICK_FLAG_SELL\x10@*}\n" +
	"\x0ePositionReason\x12\x1a\n" +
	"\x16POSITION_REASON_CLIENT\x10\x00\x12\x1a\n" +
	"\x16POSITION_REASON_MOBILE\x10\x01\x12\x17\n" +
	"\x13POSITION_REASON_WEB\x10\x02\x12\x1a\n" +
	"\x16POSITION_REASON_EXPERT\x10\x03*\x98\x02\n" +
	"\n" +
	"OrderState\x12\x17\n" +
	"\x13ORDER_STATE_STARTED\x10\x00\x12\x16\n" +
	"\x12ORDER_STATE_PLACED\x10\x01\x12\x18\n" +
	"\x14ORDER_STATE_CANCELED\x10\x02\x12\x17\n" +
	"\x13ORDER_STATE_PARTIAL\x10\x03\x12\x16\n" +
	"\x12ORDER_STATE_FILLED\x10\x04\x12\x18\n" +
	"\x14ORDER_STATE_REJECTED\x10\x05\x12\x17\n" +
	"\x13ORDER_STATE_EXPIRED\x10\x06\x12\x1b\n" +
	"\x17ORDER_STATE_REQUEST_ADD\x10\a\x12\x1e\n" +
	"\x1aORDER_STATE_REQUEST_MODIFY\x10\b\x12\x1e\n" +
	"\x1aORDER_STATE_REQUEST_CANCEL\x10\t*\xad\x01\n" +
	"\vOrderReason\x12\x17\n" +
	"\x13ORDER_REASON_CLIENT\x10\x00\x12\x17\n" +
	"\x13ORDER_REASON_MOBILE\x10\x01\x12\x14\n" +
	"\x10ORDER_REASON_WEB\x10\x02\x12\x17\n" +
	"\x13ORDER_REASON_EXPERT\x10\x03\x12\x13\n" +
	"\x0fORDER_REASON_SL\x10\x04\x12\x13\n" +
	"\x0fORDER_REASON_TP\x10\x05\x12\x13\n" +
	"\x0fORDER_REASON_SO\x10\x06*\xda\x03\n" +
	"\bDealType\x12\x11\n" +
	"\rDEAL_TYPE_BUY\x10\x00\x12\x12\n" +
	"\x0eDEAL_TYPE_SELL\x10\x01\x12\x15\n" +
	"\x11DEAL_TYPE_BALANCE\x10\x02\x12\x14\n" +
	"\x10DEAL_TYPE_CREDIT\x10\x03\x12\x14\n" +
	"\x10DEAL_TYPE_CHARGE\x10\x04\x12\x18\n" +
	"\x14DEAL_TYPE_CORRECTION\x10\x05\x12\x13\n" +
	"\x0fDEAL_TYPE_BONUS\x10\x06\x12\x18\n" +
	"\x14DEAL_TYPE_COMMISSION\x10\a\x12\x1e\n" +
	"\x1aDEAL_TYPE_COMMISSION_DAILY\x10\b\x12 \n" +
	"\x1cDEAL_TYPE_COMMISSION_MONTHLY\x10\t\x12$\n" +
	" DEAL_TYPE_COMMISSION_AGENT_DAILY\x10\n" +
	"\x12&\n" +
	"\"DEAL_TYPE_COMMISSION_AGENT_MONTHLY\x10\v\x12\x16\n" +
	"\x12DEAL_TYPE_INTEREST\x10\f\x12\x1a\n" +
	"\x16DEAL_TYPE_BUY_CANCELED\x10\r\x12\x1b\n" +
	"\x17DEAL_TYPE_SELL_CANCELED\x10\x0e\x12\x11\n" +
	"\rDEAL_DIVIDEND\x10\x0f\x12\x19\n" +
	"\x15DEAL_DIVIDEND_FRANKED\x10\x10\x12\f\n" +
	"\bDEAL_TAX\x10\x11*_\n" +
	"\tDealEntry\x12\x11\n" +
	"\rDEAL_ENTRY_IN\x10\x00\x12\x12\n" +
	"\x0eDEAL_ENTRY_OUT\x10\x01\x12\x14\n" +
	"\x10DEAL_ENTRY_INOUT\x10\x02\x12\x15\n" +
	"\x11DEAL_ENTRY_OUT_BY\x10\x03*\xef\x01\n" +
	"\n" +
	"DealReason\x12\x16\n" +
	"\x12DEAL_REASON_CLIENT\x10\x00\x12\x16\n" +
	"\x12DEAL_REASON_MOBILE\x10\x01\x12\x13\n" +
	"\x0fDEAL_REASON_WEB\x10\x02\x12\x16\n" +
	"\x12DEAL_REASON_EXPERT\x10\x03\x12\x12\n" +
	"\x0eDEAL_REASON_SL\x10\x04\x12\x12\n" +
	"\x0eDEAL_REASON_TP\x10\x05\x12\x12\n" +
	"\x0eDEAL_REASON_SO\x10\x06\x12\x18\n" +
	"\x14DEAL_REASON_ROLLOVER\x10\a\x12\x17\n" +
	"\x13DEAL_REASON_VMARGIN\x10\b\x12\x15\n" +
	"\x11DEAL_REASON_SPLIT\x10\t*l\n" +
	"\x10AccountTradeMode\x12\x1b\n" +
	"\x17ACCOUNT_TRADE_MODE_DEMO\x10\x00\x12\x1e\n" +
	"\x1aACCOUNT_TRADE_MODE_CONTEST\x10\x01\x12\x1b\n" +
	"\x17ACCOUNT_TRADE_MODE_REAL\x10\x02*V\n" +
	"\x12AccountStopoutMode\x12 \n" +
	"\x1cACCOUNT_STOPOUT_MODE_PERCENT\x10\x00\x12\x1e\n" +
	"\x1aACCOUNT_STOPOUT_MODE_MONEY\x10\x01*\x85\x01\n" +
	"\x11AccountMarginMode\x12&\n" +
	"\"ACCOUNT_MARGIN_MODE_RETAIL_NETTING\x10\x00\x12 \n" +
	"\x1cACCOUNT_MARGIN_MODE_EXCHANGE\x10\x01\x12&\n" +
	"\"ACCOUNT_MARGIN_MODE_RETAIL_HEDGING\x10\x02*H\n" +
	"\x0fSymbolChartMode\x12\x19\n" +
	"\x15SYMBOL_CHART_MODE_BID\x10\x00\x12\x1a\n" +
	"\x16SYMBOL_CHART_MODE_LAST\x10\x01*\xf3\x03\n" +
	"\x0eSymbolCalcMode\x12\x1a\n" +
	"\x16SYMBOL_CALC_MODE_FOREX\x10\x00\x12\x1c\n" +
	"\x18SYMBOL_CALC_MODE_FUTURES\x10\x01\x12\x18\n" +
	"\x14SYMBOL_CALC_MODE_CFD\x10\x02\x12\x1d\n" +
	"\x19SYMBOL_CALC_MODE_CFDINDEX\x10\x03\x12 \n" +
	"\x1cSYMBOL_CALC_MODE_CFDLEVERAGE\x10\x04\x12&\n" +
	"\"SYMBOL_CALC_MODE_FOREX_NO_LEVERAGE\x10\x05\x12 \n" +
	"\x1cSYMBOL_CALC_MODE_EXCH_STOCKS\x10 \x12!\n" +
	"\x1dSYMBOL_CALC_MODE_EXCH_FUTURES\x10!\x12!\n" +
	"\x1dSYMBOL_CALC_MODE_EXCH_OPTIONS\x10\"\x12(\n" +
	"$SYMBOL_CALC_MODE_EXCH_OPTIONS_MARGIN\x10$\x12\x1f\n" +
	"\x1bSYMBOL_CALC_MODE_EXCH_BONDS\x10%\x12%\n" +
	"!SYMBOL_CALC_MODE_EXCH_STOCKS_MOEX\x10&\x12$\n" +
	" SYMBOL_CALC_MODE_EXCH_BONDS_MOEX\x10'\x12$\n" +
	" SYMBOL_CALC_MODE_SERV_COLLATERAL\x10@*\xaf\x01\n" +
	"\x0fSymbolTradeMode\x12\x1e\n" +
	"\x1aSYMBOL_TRADE_MODE_DISABLED\x10\x00\x12\x1e\n" +
	"\x1aSYMBOL_TRADE_MODE_LONGONLY\x10\x01\x12\x1f\n" +
	"\x1bSYMBOL_TRADE_MODE_SHORTONLY\x10\x02\x12\x1f\n" +
	"\x1bSYMBOL_TRADE_MODE_CLOSEONLY\x10\x03\x12\x1a\n" +
	"\x16SYMBOL_TRADE_MODE_FULL\x10\x04*\xa6\x01\n" +
	"\x14SymbolTradeExecution\x12\"\n" +
	"\x1eSYMBOL_TRADE_EXECUTION_REQUEST\x10\x00\x12\"\n" +
	"\x1eSYMBOL_TRADE_EXECUTION_INSTANT\x10\x01\x12!\n" +
	"\x1dSYMBOL_TRADE_EXECUTION_MARKET\x10\x02\x12#\n" +
	"\x1fSYMBOL_TRADE_EXECUTION_EXCHANGE\x10\x03*\xd0\x02\n" +
	"\x0eSymbolSwapMode\x12\x1d\n" +
	"\x19SYMBOL_SWAP_MODE_DISABLED\x10\x00\x12\x1b\n" +
	"\x17SYMBOL_SWAP_MODE_POINTS\x10\x01\x12$\n" +
	" SYMBOL_SWAP_MODE_CURRENCY_SYMBOL\x10\x02\x12$\n" +
	" SYMBOL_SWAP_MODE_CURRENCY_MARGIN\x10\x03\x12%\n" +
	"!SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT\x10\x04\x12%\n" +
	"!SYMBOL_SWAP_MODE_INTEREST_CURRENT\x10\x05\x12\"\n" +
	"\x1eSYMBOL_SWAP_MODE_INTEREST_OPEN\x10\x06\x12#\n" +
	"\x1fSYMBOL_SWAP_MODE_REOPEN_CURRENT\x10\a\x12\x1f\n" +
	"\x1bSYMBOL_SWAP_MODE_REOPEN_BID\x10\b*\xbb\x01\n" +
	"\tDayOfWeek\x12\x16\n" +
	"\x12DAY_OF_WEEK_SUNDAY\x10\x00\x12\x16\n" +
	"\x12DAY_OF_WEEK_MONDAY\x10\x01\x12\x17\n" +
	"\x13DAY_OF_WEEK_TUESDAY\x10\x02\x12\x19\n" +
	"\x15DAY_OF_WEEK_WEDNESDAY\x10\x03\x12\x18\n" +
	"\x14DAY_OF_WEEK_THURSDAY\x10\x04\x12\x16\n" +
	"\x12DAY_OF_WEEK_FRIDAY\x10\x05\x12\x18\n" +
	"\x14DAY_OF_WEEK_SATURDAY\x10\x06*f\n" +
	"\x12SymbolOrderGTCMode\x12\x15\n" +
	"\x11SYMBOL_ORDERS_GTC\x10\x00\x12\x17\n" +
	"\x13SYMBOL_ORDERS_DAILY\x10\x01\x12 \n" +
	"\x1cSYMBOL_ORDERS_DAILY_NO_STOPS\x10\x02*N\n" +
	"\x11SymbolOptionRight\x12\x1c\n" +
	"\x18SYMBOL_OPTION_RIGHT_CALL\x10\x00\x12\x1b\n" +
	"\x17SYMBOL_OPTION_RIGHT_PUT\x10\x01*T\n" +
	"\x10SymbolOptionMode\x12\x1f\n" +
	"\x1bSYMBOL_OPTION_MODE_EUROPEAN\x10\x00\x12\x1f\n" +
	"\x1bSYMBOL_OPTION_MODE_AMERICAN\x10\x01B=Z;github.com/hybrid-syntax/mt5-grpc/go/mt5grpc/internal/pb;pbb\x06proto3"

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData []byte
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_enums_proto_rawDesc), len(file_enums_proto_rawDesc)))
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 27)
var file_enums_proto_goTypes = []any{
	(TimeFrame)(0),            // 0: TimeFrame
	(OrderTime)(0),            // 1: OrderTime
	(OrderTypeFilling)(0),     // 2: OrderTypeFilling
	(TradeAction)(0),          // 3: TradeAction
	(OrderType)(0),            // 4: OrderType
	(BookType)(0),             // 5: BookType
	(TradeReturnCode)(0),      // 6: TradeReturnCode
	(PositionType)(0),         // 7: PositionType
	(TickFlag)(0),             // 8: TickFlag
	(PositionReason)(0),       // 9: PositionReason
	(OrderState)(0),           // 10: OrderState
	(OrderReason)(0),          // 11: OrderReason
	(DealType)(0),             // 12: DealType
	(DealEntry)(0),            // 13: DealEntry
	(DealReason)(0),           // 14: DealReason
	(AccountTradeMode)(0),     // 15: AccountTradeMode
	(AccountStopoutMode)(0),   // 16: AccountStopoutMode
	(AccountMarginMode)(0),    // 17: AccountMarginMode
	(SymbolChartMode)(0),      // 18: SymbolChartMode
	(SymbolCalcMode)(0),       // 19: SymbolCalcMode
	(SymbolTradeMode)(0),      // 20: SymbolTradeMode
	(SymbolTradeExecution)(0), // 21: SymbolTradeExecution
	(SymbolSwapMode)(0),       // 22: SymbolSwapMode
	(DayOfWeek)(0),            // 23: DayOfWeek
	(SymbolOrderGTCMode)(0),   // 24: SymbolOrderGTCMode
	(SymbolOptionRight)(0),    // 25: SymbolOptionRight
	(SymbolOptionMode)(0),     // 26: SymbolOptionMode
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_enums_proto_rawDesc), len(file_enums_proto_rawDesc)),
			NumEnums:      27,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
