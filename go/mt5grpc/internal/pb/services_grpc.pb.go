// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetaTrader5Service_CopyRatesRange_FullMethodName     = "/MetaTrader5Service/CopyRatesRange"
	MetaTrader5Service_CopyRatesFrom_FullMethodName      = "/MetaTrader5Service/CopyRatesFrom"
	MetaTrader5Service_CopyRatesFromPos_FullMethodName   = "/MetaTrader5Service/CopyRatesFromPos"
	MetaTrader5Service_CopyTicksFrom_FullMethodName      = "/MetaTrader5Service/CopyTicksFrom"
	MetaTrader5Service_CopyTicksRange_FullMethodName     = "/MetaTrader5Service/CopyTicksRange"
	MetaTrader5Service_SymbolsGet_FullMethodName         = "/MetaTrader5Service/SymbolsGet"
	MetaTrader5Service_SymbolInfo_FullMethodName         = "/MetaTrader5Service/SymbolInfo"
	MetaTrader5Service_SymbolsTotal_FullMethodName       = "/MetaTrader5Service/SymbolsTotal"
	MetaTrader5Service_SymbolInfoTick_FullMethodName     = "/MetaTrader5Service/SymbolInfoTick"
	MetaTrader5Service_SymbolSelect_FullMethodName       = "/MetaTrader5Service/SymbolSelect"
	MetaTrader5Service_OrderSend_FullMethodName          = "/MetaTrader5Service/OrderSend"
	MetaTrader5Service_OrderCheck_FullMethodName         = "/MetaTrader5Service/OrderCheck"
	MetaTrader5Service_OrdersTotal_FullMethodName        = "/MetaTrader5Service/OrdersTotal"
	MetaTrader5Service_OrdersGet_FullMethodName          = "/MetaTrader5Service/OrdersGet"
	MetaTrader5Service_OrderCalcMargin_FullMethodName    = "/MetaTrader5Service/OrderCalcMargin"
	MetaTrader5Service_OrderCalcProfit_FullMethodName    = "/MetaTrader5Service/OrderCalcProfit"
	MetaTrader5Service_PositionsGet_FullMethodName       = "/MetaTrader5Service/PositionsGet"
	MetaTrader5Service_PositionsTotal_FullMethodName     = "/MetaTrader5Service/PositionsTotal"
	MetaTrader5Service_HistoryOrdersTotal_FullMethodName = "/MetaTrader5Service/HistoryOrdersTotal"
	MetaTrader5Service_HistoryOrdersGet_FullMethodName   = "/MetaTrader5Service/HistoryOrdersGet"
	MetaTrader5Service_HistoryDealsTotal_FullMethodName  = "/MetaTrader5Service/HistoryDealsTotal"
	MetaTrader5Service_HistoryDealsGet_FullMethodName    = "/MetaTrader5Service/HistoryDealsGet"
	MetaTrader5Service_LastError_FullMethodName          = "/MetaTrader5Service/LastError"
	MetaTrader5Service_MarketBookAdd_FullMethodName      = "/MetaTrader5Service/MarketBookAdd"
	MetaTrader5Service_MarketBookGet_FullMethodName      = "/MetaTrader5Service/MarketBookGet"
	MetaTrader5Service_MarketBookRelease_FullMethodName  = "/MetaTrader5Service/MarketBookRelease"
	MetaTrader5Service_Initialize_FullMethodName         = "/MetaTrader5Service/Initialize"
	MetaTrader5Service_Login_FullMethodName              = "/MetaTrader5Service/Login"
	MetaTrader5Service_Shutdown_FullMethodName           = "/MetaTrader5Service/Shutdown"
	MetaTrader5Service_Version_FullMethodName            = "/MetaTrader5Service/Version"
	MetaTrader5Service_AccountInfo_FullMethodName        = "/MetaTrader5Service/AccountInfo"
	MetaTrader5Service_TerminalInfo_FullMethodName       = "/MetaTrader5Service/TerminalInfo"
	MetaTrader5Service_Close_FullMethodName              = "/MetaTrader5Service/Close"
	MetaTrader5Service_Buy_FullMethodName                = "/MetaTrader5Service/Buy"
	MetaTrader5Service_Sell_FullMethodName               = "/MetaTrader5Service/Sell"
)

// MetaTrader5ServiceClient is the client API for MetaTrader5Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaTrader5ServiceClient interface {
	// market data
	CopyRatesRange(ctx context.Context, in *CopyRatesRangeRequest, opts ...grpc.CallOption) (*CopyRatesResponse, error)
	CopyRatesFrom(ctx context.Context, in *CopyRatesFromRequest, opts ...grpc.CallOption) (*CopyRatesResponse, error)
	CopyRatesFromPos(ctx context.Context, in *CopyRatesFromPosRequest, opts ...grpc.CallOption) (*CopyRatesResponse, error)
	CopyTicksFrom(ctx context.Context, in *CopyTicksFromRequest, opts ...grpc.CallOption) (*CopyTicksResponse, error)
	CopyTicksRange(ctx context.Context, in *CopyTicksRangeRequest, opts ...grpc.CallOption) (*CopyTicksResponse, error)
	SymbolsGet(ctx context.Context, in *SymbolsGetRequest, opts ...grpc.CallOption) (*SymbolsGetResponse, error)
	SymbolInfo(ctx context.Context, in *SymbolInfoRequest, opts ...grpc.CallOption) (*SymbolInfoResponse, error)
	SymbolsTotal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SymbolsTotalResponse, error)
	SymbolInfoTick(ctx context.Context, in *SymbolInfoTickRequest, opts ...grpc.CallOption) (*SymbolInfoTickResponse, error)
	SymbolSelect(ctx context.Context, in *SymbolSelectRequest, opts ...grpc.CallOption) (*SymbolSelectResponse, error)
	// Orders
	OrderSend(ctx context.Context, in *OrderSendRequest, opts ...grpc.CallOption) (*OrderSendResponse, error)
	OrderCheck(ctx context.Context, in *OrderCheckRequest, opts ...grpc.CallOption) (*OrderCheckResponse, error)
	OrdersTotal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrdersTotalResponse, error)
	OrdersGet(ctx context.Context, in *OrdersGetRequest, opts ...grpc.CallOption) (*OrdersGetResponse, error)
	OrderCalcMargin(ctx context.Context, in *OrderCalcMarginRequest, opts ...grpc.CallOption) (*OrderCalcMarginResponse, error)
	OrderCalcProfit(ctx context.Context, in *OrderCalcProfitRequest, opts ...grpc.CallOption) (*OrderCalcProfitResponse, error)
	PositionsGet(ctx context.Context, in *PositionsGetRequest, opts ...grpc.CallOption) (*PositionsGetResponse, error)
	PositionsTotal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PositionsTotalResponse, error)
	// History
	HistoryOrdersTotal(ctx context.Context, in *HistoryOrdersTotalRequest, opts ...grpc.CallOption) (*HistoryOrdersTotalResponse, error)
	HistoryOrdersGet(ctx context.Context, in *HistoryOrdersGetRequest, opts ...grpc.CallOption) (*HistoryOrdersGetResponse, error)
	HistoryDealsTotal(ctx context.Context, in *HistoryDealsTotalRequest, opts ...grpc.CallOption) (*HistoryDealsTotalResponse, error)
	HistoryDealsGet(ctx context.Context, in *HistoryDealsGetRequest, opts ...grpc.CallOption) (*HistoryDealsGetResponse, error)
	// Error
	LastError(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LastErrorResponse, error)
	// Market
	MarketBookAdd(ctx context.Context, in *MarketBookAddRequest, opts ...grpc.CallOption) (*MarketBookAddResponse, error)
	MarketBookGet(ctx context.Context, in *MarketBookGetRequest, opts ...grpc.CallOption) (*MarketBookGetResponse, error)
	MarketBookRelease(ctx context.Context, in *MarketBookReleaseRequest, opts ...grpc.CallOption) (*MarketBookReleaseResponse, error)
	// Misc
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShutdownResponse, error)
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	AccountInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountInfoResponse, error)
	TerminalInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TerminalInfoResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyResponse, error)
	Sell(ctx context.Context, in *SellRequest, opts ...grpc.CallOption) (*SellResponse, error)
}

type metaTrader5ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaTrader5ServiceClient(cc grpc.ClientConnInterface) MetaTrader5ServiceClient {
	return &metaTrader5ServiceClient{cc}
}

func (c *metaTrader5ServiceClient) CopyRatesRange(ctx context.Context, in *CopyRatesRangeRequest, opts ...grpc.CallOption) (*CopyRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyRatesResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_CopyRatesRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) CopyRatesFrom(ctx context.Context, in *CopyRatesFromRequest, opts ...grpc.CallOption) (*CopyRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyRatesResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_CopyRatesFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) CopyRatesFromPos(ctx context.Context, in *CopyRatesFromPosRequest, opts ...grpc.CallOption) (*CopyRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyRatesResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_CopyRatesFromPos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) CopyTicksFrom(ctx context.Context, in *CopyTicksFromRequest, opts ...grpc.CallOption) (*CopyTicksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyTicksResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_CopyTicksFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) CopyTicksRange(ctx context.Context, in *CopyTicksRangeRequest, opts ...grpc.CallOption) (*CopyTicksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyTicksResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_CopyTicksRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) SymbolsGet(ctx context.Context, in *SymbolsGetRequest, opts ...grpc.CallOption) (*SymbolsGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SymbolsGetResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_SymbolsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) SymbolInfo(ctx context.Context, in *SymbolInfoRequest, opts ...grpc.CallOption) (*SymbolInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SymbolInfoResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_SymbolInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) SymbolsTotal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SymbolsTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SymbolsTotalResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_SymbolsTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) SymbolInfoTick(ctx context.Context, in *SymbolInfoTickRequest, opts ...grpc.CallOption) (*SymbolInfoTickResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SymbolInfoTickResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_SymbolInfoTick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) SymbolSelect(ctx context.Context, in *SymbolSelectRequest, opts ...grpc.CallOption) (*SymbolSelectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SymbolSelectResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_SymbolSelect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) OrderSend(ctx context.Context, in *OrderSendRequest, opts ...grpc.CallOption) (*OrderSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderSendResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_OrderSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) OrderCheck(ctx context.Context, in *OrderCheckRequest, opts ...grpc.CallOption) (*OrderCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderCheckResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_OrderCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) OrdersTotal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrdersTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrdersTotalResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_OrdersTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) OrdersGet(ctx context.Context, in *OrdersGetRequest, opts ...grpc.CallOption) (*OrdersGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrdersGetResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_OrdersGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) OrderCalcMargin(ctx context.Context, in *OrderCalcMarginRequest, opts ...grpc.CallOption) (*OrderCalcMarginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderCalcMarginResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_OrderCalcMargin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) OrderCalcProfit(ctx context.Context, in *OrderCalcProfitRequest, opts ...grpc.CallOption) (*OrderCalcProfitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderCalcProfitResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_OrderCalcProfit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) PositionsGet(ctx context.Context, in *PositionsGetRequest, opts ...grpc.CallOption) (*PositionsGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionsGetResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_PositionsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) PositionsTotal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PositionsTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionsTotalResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_PositionsTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) HistoryOrdersTotal(ctx context.Context, in *HistoryOrdersTotalRequest, opts ...grpc.CallOption) (*HistoryOrdersTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryOrdersTotalResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_HistoryOrdersTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) HistoryOrdersGet(ctx context.Context, in *HistoryOrdersGetRequest, opts ...grpc.CallOption) (*HistoryOrdersGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryOrdersGetResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_HistoryOrdersGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) HistoryDealsTotal(ctx context.Context, in *HistoryDealsTotalRequest, opts ...grpc.CallOption) (*HistoryDealsTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryDealsTotalResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_HistoryDealsTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) HistoryDealsGet(ctx context.Context, in *HistoryDealsGetRequest, opts ...grpc.CallOption) (*HistoryDealsGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryDealsGetResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_HistoryDealsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) LastError(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LastErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LastErrorResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_LastError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) MarketBookAdd(ctx context.Context, in *MarketBookAddRequest, opts ...grpc.CallOption) (*MarketBookAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarketBookAddResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_MarketBookAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) MarketBookGet(ctx context.Context, in *MarketBookGetRequest, opts ...grpc.CallOption) (*MarketBookGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarketBookGetResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_MarketBookGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) MarketBookRelease(ctx context.Context, in *MarketBookReleaseRequest, opts ...grpc.CallOption) (*MarketBookReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarketBookReleaseResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_MarketBookRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) AccountInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountInfoResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_AccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) TerminalInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TerminalInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminalInfoResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_TerminalInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuyResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_Buy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTrader5ServiceClient) Sell(ctx context.Context, in *SellRequest, opts ...grpc.CallOption) (*SellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SellResponse)
	err := c.cc.Invoke(ctx, MetaTrader5Service_Sell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaTrader5ServiceServer is the server API for MetaTrader5Service service.
// All implementations must embed UnimplementedMetaTrader5ServiceServer
// for forward compatibility.
type MetaTrader5ServiceServer interface {
	// market data
	CopyRatesRange(context.Context, *CopyRatesRangeRequest) (*CopyRatesResponse, error)
	CopyRatesFrom(context.Context, *CopyRatesFromRequest) (*CopyRatesResponse, error)
	CopyRatesFromPos(context.Context, *CopyRatesFromPosRequest) (*CopyRatesResponse, error)
	CopyTicksFrom(context.Context, *CopyTicksFromRequest) (*CopyTicksResponse, error)
	CopyTicksRange(context.Context, *CopyTicksRangeRequest) (*CopyTicksResponse, error)
	SymbolsGet(context.Context, *SymbolsGetRequest) (*SymbolsGetResponse, error)
	SymbolInfo(context.Context, *SymbolInfoRequest) (*SymbolInfoResponse, error)
	SymbolsTotal(context.Context, *emptypb.Empty) (*SymbolsTotalResponse, error)
	SymbolInfoTick(context.Context, *SymbolInfoTickRequest) (*SymbolInfoTickResponse, error)
	SymbolSelect(context.Context, *SymbolSelectRequest) (*SymbolSelectResponse, error)
	// Orders
	OrderSend(context.Context, *OrderSendRequest) (*OrderSendResponse, error)
	OrderCheck(context.Context, *OrderCheckRequest) (*OrderCheckResponse, error)
	OrdersTotal(context.Context, *emptypb.Empty) (*OrdersTotalResponse, error)
	OrdersGet(context.Context, *OrdersGetRequest) (*OrdersGetResponse, error)
	OrderCalcMargin(context.Context, *OrderCalcMarginRequest) (*OrderCalcMarginResponse, error)
	OrderCalcProfit(context.Context, *OrderCalcProfitRequest) (*OrderCalcProfitResponse, error)
	PositionsGet(context.Context, *PositionsGetRequest) (*PositionsGetResponse, error)
	PositionsTotal(context.Context, *emptypb.Empty) (*PositionsTotalResponse, error)
	// History
	HistoryOrdersTotal(context.Context, *HistoryOrdersTotalRequest) (*HistoryOrdersTotalResponse, error)
	HistoryOrdersGet(context.Context, *HistoryOrdersGetRequest) (*HistoryOrdersGetResponse, error)
	HistoryDealsTotal(context.Context, *HistoryDealsTotalRequest) (*HistoryDealsTotalResponse, error)
	HistoryDealsGet(context.Context, *HistoryDealsGetRequest) (*HistoryDealsGetResponse, error)
	// Error
	LastError(context.Context, *emptypb.Empty) (*LastErrorResponse, error)
	// Market
	MarketBookAdd(context.Context, *MarketBookAddRequest) (*MarketBookAddResponse, error)
	MarketBookGet(context.Context, *MarketBookGetRequest) (*MarketBookGetResponse, error)
	MarketBookRelease(context.Context, *MarketBookReleaseRequest) (*MarketBookReleaseResponse, error)
	// Misc
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Shutdown(context.Context, *emptypb.Empty) (*ShutdownResponse, error)
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	AccountInfo(context.Context, *emptypb.Empty) (*AccountInfoResponse, error)
	TerminalInfo(context.Context, *emptypb.Empty) (*TerminalInfoResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	Buy(context.Context, *BuyRequest) (*BuyResponse, error)
	Sell(context.Context, *SellRequest) (*SellResponse, error)
	mustEmbedUnimplementedMetaTrader5ServiceServer()
}

// UnimplementedMetaTrader5ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetaTrader5ServiceServer struct{}

func (UnimplementedMetaTrader5ServiceServer) CopyRatesRange(context.Context, *CopyRatesRangeRequest) (*CopyRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyRatesRange not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) CopyRatesFrom(context.Context, *CopyRatesFromRequest) (*CopyRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyRatesFrom not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) CopyRatesFromPos(context.Context, *CopyRatesFromPosRequest) (*CopyRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyRatesFromPos not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) CopyTicksFrom(context.Context, *CopyTicksFromRequest) (*CopyTicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyTicksFrom not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) CopyTicksRange(context.Context, *CopyTicksRangeRequest) (*CopyTicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyTicksRange not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) SymbolsGet(context.Context, *SymbolsGetRequest) (*SymbolsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolsGet not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) SymbolInfo(context.Context, *SymbolInfoRequest) (*SymbolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolInfo not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) SymbolsTotal(context.Context, *emptypb.Empty) (*SymbolsTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolsTotal not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) SymbolInfoTick(context.Context, *SymbolInfoTickRequest) (*SymbolInfoTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolInfoTick not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) SymbolSelect(context.Context, *SymbolSelectRequest) (*SymbolSelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolSelect not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) OrderSend(context.Context, *OrderSendRequest) (*OrderSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSend not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) OrderCheck(context.Context, *OrderCheckRequest) (*OrderCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCheck not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) OrdersTotal(context.Context, *emptypb.Empty) (*OrdersTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersTotal not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) OrdersGet(context.Context, *OrdersGetRequest) (*OrdersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersGet not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) OrderCalcMargin(context.Context, *OrderCalcMarginRequest) (*OrderCalcMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCalcMargin not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) OrderCalcProfit(context.Context, *OrderCalcProfitRequest) (*OrderCalcProfitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCalcProfit not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) PositionsGet(context.Context, *PositionsGetRequest) (*PositionsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsGet not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) PositionsTotal(context.Context, *emptypb.Empty) (*PositionsTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsTotal not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) HistoryOrdersTotal(context.Context, *HistoryOrdersTotalRequest) (*HistoryOrdersTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryOrdersTotal not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) HistoryOrdersGet(context.Context, *HistoryOrdersGetRequest) (*HistoryOrdersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryOrdersGet not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) HistoryDealsTotal(context.Context, *HistoryDealsTotalRequest) (*HistoryDealsTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryDealsTotal not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) HistoryDealsGet(context.Context, *HistoryDealsGetRequest) (*HistoryDealsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryDealsGet not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) LastError(context.Context, *emptypb.Empty) (*LastErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastError not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) MarketBookAdd(context.Context, *MarketBookAddRequest) (*MarketBookAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBookAdd not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) MarketBookGet(context.Context, *MarketBookGetRequest) (*MarketBookGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBookGet not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) MarketBookRelease(context.Context, *MarketBookReleaseRequest) (*MarketBookReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBookRelease not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) Shutdown(context.Context, *emptypb.Empty) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) AccountInfo(context.Context, *emptypb.Empty) (*AccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) TerminalInfo(context.Context, *emptypb.Empty) (*TerminalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminalInfo not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) Buy(context.Context, *BuyRequest) (*BuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) Sell(context.Context, *SellRequest) (*SellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (UnimplementedMetaTrader5ServiceServer) mustEmbedUnimplementedMetaTrader5ServiceServer() {}
func (UnimplementedMetaTrader5ServiceServer) testEmbeddedByValue()                            {}

// UnsafeMetaTrader5ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaTrader5ServiceServer will
// result in compilation errors.
type UnsafeMetaTrader5ServiceServer interface {
	mustEmbedUnimplementedMetaTrader5ServiceServer()
}

func RegisterMetaTrader5ServiceServer(s grpc.ServiceRegistrar, srv MetaTrader5ServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetaTrader5ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetaTrader5Service_ServiceDesc, srv)
}

func _MetaTrader5Service_CopyRatesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRatesRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).CopyRatesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_CopyRatesRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).CopyRatesRange(ctx, req.(*CopyRatesRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_CopyRatesFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRatesFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).CopyRatesFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_CopyRatesFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).CopyRatesFrom(ctx, req.(*CopyRatesFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_CopyRatesFromPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRatesFromPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).CopyRatesFromPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_CopyRatesFromPos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).CopyRatesFromPos(ctx, req.(*CopyRatesFromPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_CopyTicksFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyTicksFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).CopyTicksFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_CopyTicksFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).CopyTicksFrom(ctx, req.(*CopyTicksFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_CopyTicksRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyTicksRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).CopyTicksRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_CopyTicksRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).CopyTicksRange(ctx, req.(*CopyTicksRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_SymbolsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).SymbolsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_SymbolsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).SymbolsGet(ctx, req.(*SymbolsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_SymbolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).SymbolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_SymbolInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).SymbolInfo(ctx, req.(*SymbolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_SymbolsTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).SymbolsTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_SymbolsTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).SymbolsTotal(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_SymbolInfoTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolInfoTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).SymbolInfoTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_SymbolInfoTick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).SymbolInfoTick(ctx, req.(*SymbolInfoTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_SymbolSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).SymbolSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_SymbolSelect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).SymbolSelect(ctx, req.(*SymbolSelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_OrderSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).OrderSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_OrderSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).OrderSend(ctx, req.(*OrderSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_OrderCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).OrderCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_OrderCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).OrderCheck(ctx, req.(*OrderCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_OrdersTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).OrdersTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_OrdersTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).OrdersTotal(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_OrdersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).OrdersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_OrdersGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).OrdersGet(ctx, req.(*OrdersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_OrderCalcMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCalcMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).OrderCalcMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_OrderCalcMargin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).OrderCalcMargin(ctx, req.(*OrderCalcMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_OrderCalcProfit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCalcProfitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).OrderCalcProfit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_OrderCalcProfit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).OrderCalcProfit(ctx, req.(*OrderCalcProfitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_PositionsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).PositionsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_PositionsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).PositionsGet(ctx, req.(*PositionsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_PositionsTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).PositionsTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_PositionsTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).PositionsTotal(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_HistoryOrdersTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryOrdersTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).HistoryOrdersTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_HistoryOrdersTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).HistoryOrdersTotal(ctx, req.(*HistoryOrdersTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_HistoryOrdersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryOrdersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).HistoryOrdersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_HistoryOrdersGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).HistoryOrdersGet(ctx, req.(*HistoryOrdersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_HistoryDealsTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryDealsTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).HistoryDealsTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_HistoryDealsTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).HistoryDealsTotal(ctx, req.(*HistoryDealsTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_HistoryDealsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryDealsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).HistoryDealsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_HistoryDealsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).HistoryDealsGet(ctx, req.(*HistoryDealsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_LastError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).LastError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_LastError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).LastError(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_MarketBookAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketBookAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).MarketBookAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_MarketBookAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).MarketBookAdd(ctx, req.(*MarketBookAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_MarketBookGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketBookGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).MarketBookGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_MarketBookGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).MarketBookGet(ctx, req.(*MarketBookGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_MarketBookRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketBookReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).MarketBookRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_MarketBookRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).MarketBookRelease(ctx, req.(*MarketBookReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).Shutdown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_AccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).AccountInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_TerminalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).TerminalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_TerminalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).TerminalInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_Buy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).Buy(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTrader5Service_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTrader5ServiceServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTrader5Service_Sell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTrader5ServiceServer).Sell(ctx, req.(*SellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaTrader5Service_ServiceDesc is the grpc.ServiceDesc for MetaTrader5Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaTrader5Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MetaTrader5Service",
	HandlerType: (*MetaTrader5ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyRatesRange",
			Handler:    _MetaTrader5Service_CopyRatesRange_Handler,
		},
		{
			MethodName: "CopyRatesFrom",
			Handler:    _MetaTrader5Service_CopyRatesFrom_Handler,
		},
		{
			MethodName: "CopyRatesFromPos",
			Handler:    _MetaTrader5Service_CopyRatesFromPos_Handler,
		},
		{
			MethodName: "CopyTicksFrom",
			Handler:    _MetaTrader5Service_CopyTicksFrom_Handler,
		},
		{
			MethodName: "CopyTicksRange",
			Handler:    _MetaTrader5Service_CopyTicksRange_Handler,
		},
		{
			MethodName: "SymbolsGet",
			Handler:    _MetaTrader5Service_SymbolsGet_Handler,
		},
		{
			MethodName: "SymbolInfo",
			Handler:    _MetaTrader5Service_SymbolInfo_Handler,
		},
		{
			MethodName: "SymbolsTotal",
			Handler:    _MetaTrader5Service_SymbolsTotal_Handler,
		},
		{
			MethodName: "SymbolInfoTick",
			Handler:    _MetaTrader5Service_SymbolInfoTick_Handler,
		},
		{
			MethodName: "SymbolSelect",
			Handler:    _MetaTrader5Service_SymbolSelect_Handler,
		},
		{
			MethodName: "OrderSend",
			Handler:    _MetaTrader5Service_OrderSend_Handler,
		},
		{
			MethodName: "OrderCheck",
			Handler:    _MetaTrader5Service_OrderCheck_Handler,
		},
		{
			MethodName: "OrdersTotal",
			Handler:    _MetaTrader5Service_OrdersTotal_Handler,
		},
		{
			MethodName: "OrdersGet",
			Handler:    _MetaTrader5Service_OrdersGet_Handler,
		},
		{
			MethodName: "OrderCalcMargin",
			Handler:    _MetaTrader5Service_OrderCalcMargin_Handler,
		},
		{
			MethodName: "OrderCalcProfit",
			Handler:    _MetaTrader5Service_OrderCalcProfit_Handler,
		},
		{
			MethodName: "PositionsGet",
			Handler:    _MetaTrader5Service_PositionsGet_Handler,
		},
		{
			MethodName: "PositionsTotal",
			Handler:    _MetaTrader5Service_PositionsTotal_Handler,
		},
		{
			MethodName: "HistoryOrdersTotal",
			Handler:    _MetaTrader5Service_HistoryOrdersTotal_Handler,
		},
		{
			MethodName: "HistoryOrdersGet",
			Handler:    _MetaTrader5Service_HistoryOrdersGet_Handler,
		},
		{
			MethodName: "HistoryDealsTotal",
			Handler:    _MetaTrader5Service_HistoryDealsTotal_Handler,
		},
		{
			MethodName: "HistoryDealsGet",
			Handler:    _MetaTrader5Service_HistoryDealsGet_Handler,
		},
		{
			MethodName: "LastError",
			Handler:    _MetaTrader5Service_LastError_Handler,
		},
		{
			MethodName: "MarketBookAdd",
			Handler:    _MetaTrader5Service_MarketBookAdd_Handler,
		},
		{
			MethodName: "MarketBookGet",
			Handler:    _MetaTrader5Service_MarketBookGet_Handler,
		},
		{
			MethodName: "MarketBookRelease",
			Handler:    _MetaTrader5Service_MarketBookRelease_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _MetaTrader5Service_Initialize_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MetaTrader5Service_Login_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _MetaTrader5Service_Shutdown_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _MetaTrader5Service_Version_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _MetaTrader5Service_AccountInfo_Handler,
		},
		{
			MethodName: "TerminalInfo",
			Handler:    _MetaTrader5Service_TerminalInfo_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _MetaTrader5Service_Close_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _MetaTrader5Service_Buy_Handler,
		},
		{
			MethodName: "Sell",
			Handler:    _MetaTrader5Service_Sell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
